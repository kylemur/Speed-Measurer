
speed_measurer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08005070  08005070  00006070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005240  08005240  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005240  08005240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005248  08005248  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005248  08005248  00006248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005250  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000060  080052b0  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080052b0  000072e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bda0  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad2  00000000  00000000  00012e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00014908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9a  00000000  00000000  000156c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267e8  00000000  00000000  0001615a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e872  00000000  00000000  0003c942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efc0e  00000000  00000000  0004b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013adc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000401c  00000000  00000000  0013ae08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013ee24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005058 	.word	0x08005058

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005058 	.word	0x08005058

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	0000      	movs	r0, r0
	...

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b09a      	sub	sp, #104	@ 0x68
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b46:	f000 ffbb 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4a:	f000 f9e5 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4e:	f000 fb3f 	bl	80011d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b52:	f000 fa33 	bl	8000fbc <MX_SPI1_Init>
  MX_TIM1_Init();
 8000b56:	f000 fa6f 	bl	8001038 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b5a:	f000 fac1 	bl	80010e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /// Initialize the Timer and PWM
  HAL_TIM_Base_Start(&htim1);
 8000b5e:	483a      	ldr	r0, [pc, #232]	@ (8000c48 <main+0x108>)
 8000b60:	f002 fd54 	bl	800360c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // start PWM on Timer3’s Channel 2
 8000b64:	2104      	movs	r1, #4
 8000b66:	4839      	ldr	r0, [pc, #228]	@ (8000c4c <main+0x10c>)
 8000b68:	f002 fe1a 	bl	80037a0 <HAL_TIM_PWM_Start>



  /// Initialize the GLCD
  GLCD_init(); 	// initialize the screen
 8000b6c:	f000 fc14 	bl	8001398 <GLCD_init>
  GLCD_clear(); // clear the screen
 8000b70:	f000 fc56 	bl	8001420 <GLCD_clear>

  // Display "SPEED LIMIT "
  GLCD_setCursor(0,0); // set the cursor to the top left corner
 8000b74:	2100      	movs	r1, #0
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 fc38 	bl	80013ec <GLCD_setCursor>
  uint16_t speed_limit[] = {19, 16, 5, 5, 4, 0, 12, 9, 13, 9, 20, 0}; 	// "SPEED LIMIT " array
 8000b7c:	4b34      	ldr	r3, [pc, #208]	@ (8000c50 <main+0x110>)
 8000b7e:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000b82:	461d      	mov	r5, r3
 8000b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b8c:	e884 0003 	stmia.w	r4, {r0, r1}
  for (int i = 0; i < 12; i++) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	667b      	str	r3, [r7, #100]	@ 0x64
 8000b94:	e00b      	b.n	8000bae <main+0x6e>
	  GLCD_putchar(speed_limit[i]); 									// display "SPEED LIMIT "
 8000b96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	3368      	adds	r3, #104	@ 0x68
 8000b9c:	443b      	add	r3, r7
 8000b9e:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fc54 	bl	8001450 <GLCD_putchar>
  for (int i = 0; i < 12; i++) {
 8000ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000baa:	3301      	adds	r3, #1
 8000bac:	667b      	str	r3, [r7, #100]	@ 0x64
 8000bae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000bb0:	2b0b      	cmp	r3, #11
 8000bb2:	ddf0      	ble.n	8000b96 <main+0x56>
  }

  // Display " 0 MPH"
  speed_limit_digits = 0; 				// start the speed limit at 0
 8000bb4:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <main+0x114>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
  GLCD_setCursor(0, 1); 				// set the cursor to the second row
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 fc15 	bl	80013ec <GLCD_setCursor>
  GLCD_putchar(speed_limit_digits);		// '0'
 8000bc2:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <main+0x114>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fc42 	bl	8001450 <GLCD_putchar>
  GLCD_putchar(0);						// ' '
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 fc3f 	bl	8001450 <GLCD_putchar>
  GLCD_putchar(13);						// 'M'
 8000bd2:	200d      	movs	r0, #13
 8000bd4:	f000 fc3c 	bl	8001450 <GLCD_putchar>
  GLCD_putchar(16);						// 'P'
 8000bd8:	2010      	movs	r0, #16
 8000bda:	f000 fc39 	bl	8001450 <GLCD_putchar>
  GLCD_putchar(8);						// 'H'
 8000bde:	2008      	movs	r0, #8
 8000be0:	f000 fc36 	bl	8001450 <GLCD_putchar>

  // Display " # YOUR SPEED"
  GLCD_setCursor(0, 3); // set the cursor to the forth row
 8000be4:	2103      	movs	r1, #3
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 fc00 	bl	80013ec <GLCD_setCursor>
  uint16_t your_speed[] = {0, 0, 41, 0, 25, 15, 21, 18, 0, 19, 16, 5, 5, 4}; // " # YOUR SPEED" array
 8000bec:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <main+0x118>)
 8000bee:	f107 0418 	add.w	r4, r7, #24
 8000bf2:	461d      	mov	r5, r3
 8000bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for (int j = 0; j < 14; j++) {
 8000c00:	2300      	movs	r3, #0
 8000c02:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c04:	e00b      	b.n	8000c1e <main+0xde>
  	  GLCD_putchar(your_speed[j]); 											 // display " # YOUR SPEED"
 8000c06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	3368      	adds	r3, #104	@ 0x68
 8000c0c:	443b      	add	r3, r7
 8000c0e:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fc1c 	bl	8001450 <GLCD_putchar>
  for (int j = 0; j < 14; j++) {
 8000c18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c20:	2b0d      	cmp	r3, #13
 8000c22:	ddf0      	ble.n	8000c06 <main+0xc6>
  }

  // Display " 0 FT  0 IN"
  GLCD_setCursor(0,5); // set the cursor to the sixth row
 8000c24:	2105      	movs	r1, #5
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 fbe0 	bl	80013ec <GLCD_setCursor>
  uint16_t ft_in[] = {0, 30, 0, 6, 20, 0, 0, 30, 0, 9, 14}; // " 0 FT  0 IN" array
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <main+0x11c>)
 8000c2e:	463c      	mov	r4, r7
 8000c30:	461d      	mov	r5, r3
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c3a:	6020      	str	r0, [r4, #0]
 8000c3c:	3404      	adds	r4, #4
 8000c3e:	8021      	strh	r1, [r4, #0]
  for (int k = 0; k < 11; k++) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c44:	e018      	b.n	8000c78 <main+0x138>
 8000c46:	bf00      	nop
 8000c48:	200000e0 	.word	0x200000e0
 8000c4c:	2000012c 	.word	0x2000012c
 8000c50:	08005070 	.word	0x08005070
 8000c54:	20000188 	.word	0x20000188
 8000c58:	08005088 	.word	0x08005088
 8000c5c:	080050a4 	.word	0x080050a4
      GLCD_putchar(ft_in[k]); 								// display " 0 FT  0 IN"
 8000c60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	3368      	adds	r3, #104	@ 0x68
 8000c66:	443b      	add	r3, r7
 8000c68:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fbef 	bl	8001450 <GLCD_putchar>
  for (int k = 0; k < 11; k++) {
 8000c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c74:	3301      	adds	r3, #1
 8000c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c7a:	2b0a      	cmp	r3, #10
 8000c7c:	ddf0      	ble.n	8000c60 <main+0x120>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /// Display the Speed Limit
	  GLCD_setCursor(0, 1); 					// set the cursor to the second row
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 fbb3 	bl	80013ec <GLCD_setCursor>
	  GLCD_putchar(speed_limit_digits + 30);	// display the speed limit
 8000c86:	4b98      	ldr	r3, [pc, #608]	@ (8000ee8 <main+0x3a8>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	331e      	adds	r3, #30
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 fbdf 	bl	8001450 <GLCD_putchar>


	  /// Ultrasonic Sensor Logic to Calculate Distance
  	  // Send the ultrasonic wave for 10 microseconds
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET); 	// set the Trig pin high
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c98:	4894      	ldr	r0, [pc, #592]	@ (8000eec <main+0x3ac>)
 8000c9a:	f001 fa85 	bl	80021a8 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);								// reset the counter
 8000c9e:	4b94      	ldr	r3, [pc, #592]	@ (8000ef0 <main+0x3b0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24
	  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  				// wait for 10 us (microseconds)
 8000ca6:	bf00      	nop
 8000ca8:	4b91      	ldr	r3, [pc, #580]	@ (8000ef0 <main+0x3b0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cae:	2b09      	cmp	r3, #9
 8000cb0:	d9fa      	bls.n	8000ca8 <main+0x168>
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET); 	// set the Trig pin low
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb8:	488c      	ldr	r0, [pc, #560]	@ (8000eec <main+0x3ac>)
 8000cba:	f001 fa75 	bl	80021a8 <HAL_GPIO_WritePin>

	  // Record the time it takes for the wave to return
	  pMillis = HAL_GetTick();
 8000cbe:	f000 ff6f 	bl	8001ba0 <HAL_GetTick>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a8b      	ldr	r2, [pc, #556]	@ (8000ef4 <main+0x3b4>)
 8000cc6:	6013      	str	r3, [r2, #0]
	  while (!(HAL_GPIO_ReadPin (Echo_GPIO_Port, Echo_Pin)) && ((pMillis + 10) >  HAL_GetTick())); // wait for the Echo pin to go high
 8000cc8:	bf00      	nop
 8000cca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cce:	4887      	ldr	r0, [pc, #540]	@ (8000eec <main+0x3ac>)
 8000cd0:	f001 fa52 	bl	8002178 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d108      	bne.n	8000cec <main+0x1ac>
 8000cda:	4b86      	ldr	r3, [pc, #536]	@ (8000ef4 <main+0x3b4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f103 040a 	add.w	r4, r3, #10
 8000ce2:	f000 ff5d 	bl	8001ba0 <HAL_GetTick>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	d8ee      	bhi.n	8000cca <main+0x18a>
	  val1 = __HAL_TIM_GET_COUNTER(&htim1); 						// record the time
 8000cec:	4b80      	ldr	r3, [pc, #512]	@ (8000ef0 <main+0x3b0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf2:	4a81      	ldr	r2, [pc, #516]	@ (8000ef8 <main+0x3b8>)
 8000cf4:	6013      	str	r3, [r2, #0]

	  // wait for the Echo pin to go low
	  pMillis = HAL_GetTick();
 8000cf6:	f000 ff53 	bl	8001ba0 <HAL_GetTick>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a7d      	ldr	r2, [pc, #500]	@ (8000ef4 <main+0x3b4>)
 8000cfe:	6013      	str	r3, [r2, #0]
	  while ((HAL_GPIO_ReadPin (Echo_GPIO_Port, Echo_Pin)) && ((pMillis + 50) > HAL_GetTick())); // wait for the Echo pin to go low
 8000d00:	bf00      	nop
 8000d02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d06:	4879      	ldr	r0, [pc, #484]	@ (8000eec <main+0x3ac>)
 8000d08:	f001 fa36 	bl	8002178 <HAL_GPIO_ReadPin>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d008      	beq.n	8000d24 <main+0x1e4>
 8000d12:	4b78      	ldr	r3, [pc, #480]	@ (8000ef4 <main+0x3b4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000d1a:	f000 ff41 	bl	8001ba0 <HAL_GetTick>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	429c      	cmp	r4, r3
 8000d22:	d8ee      	bhi.n	8000d02 <main+0x1c2>
	  val2 = __HAL_TIM_GET_COUNTER(&htim1); 						// record the time
 8000d24:	4b72      	ldr	r3, [pc, #456]	@ (8000ef0 <main+0x3b0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2a:	4a74      	ldr	r2, [pc, #464]	@ (8000efc <main+0x3bc>)
 8000d2c:	6013      	str	r3, [r2, #0]

	  // calculate the distance in cm
	  distance = (val2-val1) * 0.034/2;
 8000d2e:	4b73      	ldr	r3, [pc, #460]	@ (8000efc <main+0x3bc>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b71      	ldr	r3, [pc, #452]	@ (8000ef8 <main+0x3b8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fbdb 	bl	80004f4 <__aeabi_ui2d>
 8000d3e:	a360      	add	r3, pc, #384	@ (adr r3, 8000ec0 <main+0x380>)
 8000d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d44:	f7ff fc50 	bl	80005e8 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 0200 	mov.w	r2, #0
 8000d54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d58:	f7ff fd70 	bl	800083c <__aeabi_ddiv>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	f7ff fe7a 	bl	8000a5c <__aeabi_d2uiz>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	4b64      	ldr	r3, [pc, #400]	@ (8000f00 <main+0x3c0>)
 8000d6e:	801a      	strh	r2, [r3, #0]



	  /// Speed Logic and Display
	  float speedf250 = (old_distance - distance) * 0.089476; 	// calculate the speed in mph
 8000d70:	4b64      	ldr	r3, [pc, #400]	@ (8000f04 <main+0x3c4>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b62      	ldr	r3, [pc, #392]	@ (8000f00 <main+0x3c0>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fbc9 	bl	8000514 <__aeabi_i2d>
 8000d82:	a351      	add	r3, pc, #324	@ (adr r3, 8000ec8 <main+0x388>)
 8000d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d88:	f7ff fc2e 	bl	80005e8 <__aeabi_dmul>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	f7ff fe82 	bl	8000a9c <__aeabi_d2f>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	657b      	str	r3, [r7, #84]	@ 0x54
	  speed250 = (int) speedf250; 								// convert the speed to an integer
 8000d9c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000da4:	ee17 2a90 	vmov	r2, s15
 8000da8:	4b57      	ldr	r3, [pc, #348]	@ (8000f08 <main+0x3c8>)
 8000daa:	601a      	str	r2, [r3, #0]

	  display_speed(speed250); 									// Display the speed of the car
 8000dac:	4b56      	ldr	r3, [pc, #344]	@ (8000f08 <main+0x3c8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fcb1 	bl	8001718 <display_speed>



	  /// Display the Distance in Feet and Inches
	  uint16_t inches = distance * 0.393701; // convert the distance from cm to inches
 8000db6:	4b52      	ldr	r3, [pc, #328]	@ (8000f00 <main+0x3c0>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fbaa 	bl	8000514 <__aeabi_i2d>
 8000dc0:	a343      	add	r3, pc, #268	@ (adr r3, 8000ed0 <main+0x390>)
 8000dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc6:	f7ff fc0f 	bl	80005e8 <__aeabi_dmul>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f7ff fe43 	bl	8000a5c <__aeabi_d2uiz>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
	  uint16_t feet = inches / 12;
 8000ddc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000de0:	4a4a      	ldr	r2, [pc, #296]	@ (8000f0c <main+0x3cc>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	  inches %= 12; 						 // get the remainder of inches
 8000dec:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000df0:	4b46      	ldr	r3, [pc, #280]	@ (8000f0c <main+0x3cc>)
 8000df2:	fba3 1302 	umull	r1, r3, r3, r2
 8000df6:	08d9      	lsrs	r1, r3, #3
 8000df8:	460b      	mov	r3, r1
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	440b      	add	r3, r1
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	  display_distance_ft(feet);
 8000e06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fc9e 	bl	800174c <display_distance_ft>
	  display_distance_in(inches);
 8000e10:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 fcb5 	bl	8001784 <display_distance_in>



	  /// Update the old distance to be used in the next iteration
	  old_distance = distance;
 8000e1a:	4b39      	ldr	r3, [pc, #228]	@ (8000f00 <main+0x3c0>)
 8000e1c:	881a      	ldrh	r2, [r3, #0]
 8000e1e:	4b39      	ldr	r3, [pc, #228]	@ (8000f04 <main+0x3c4>)
 8000e20:	801a      	strh	r2, [r3, #0]



	  /// Red LED Logic
	  caution_speed = speed_limit_digits * 0.8; // set the caution speed limit to 20% below the speed limit
 8000e22:	4b31      	ldr	r3, [pc, #196]	@ (8000ee8 <main+0x3a8>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fb74 	bl	8000514 <__aeabi_i2d>
 8000e2c:	a32a      	add	r3, pc, #168	@ (adr r3, 8000ed8 <main+0x398>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fbd9 	bl	80005e8 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff fe0d 	bl	8000a5c <__aeabi_d2uiz>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b32      	ldr	r3, [pc, #200]	@ (8000f10 <main+0x3d0>)
 8000e48:	701a      	strb	r2, [r3, #0]
      int PWM_PERIOD = 39999; 					// how many clock cycles for each PWM period
 8000e4a:	f649 433f 	movw	r3, #39999	@ 0x9c3f
 8000e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      int current_speed = speed250;
 8000e50:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <main+0x3c8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	65bb      	str	r3, [r7, #88]	@ 0x58

      if (current_speed < 0){ 					// if the speed is negative (aka car is moving away from the sensor)
 8000e56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	da02      	bge.n	8000e62 <main+0x322>
		  current_speed *= -1;					// make the speed positive
 8000e5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e5e:	425b      	negs	r3, r3
 8000e60:	65bb      	str	r3, [r7, #88]	@ 0x58
	  }

      if (current_speed < caution_speed){		// if the speed is less than the caution speed limit
 8000e62:	4b2b      	ldr	r3, [pc, #172]	@ (8000f10 <main+0x3d0>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	da03      	bge.n	8000e76 <main+0x336>
		  TIM3->CCR2 = (int) (0); 				// store 0% duty cycle (aka red LED off)
 8000e6e:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <main+0x3d4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e74:	e020      	b.n	8000eb8 <main+0x378>
  	  } else if (current_speed >= caution_speed && current_speed < speed_limit_digits){	// if the speed is greater than the caution speed limit and less than the speed limit
 8000e76:	4b26      	ldr	r3, [pc, #152]	@ (8000f10 <main+0x3d0>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	db17      	blt.n	8000eb2 <main+0x372>
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <main+0x3a8>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	da11      	bge.n	8000eb2 <main+0x372>
		  TIM3->CCR2 = (int) (0.1 * PWM_PERIOD);// store 10% duty cycle (aka red LED on dim)
 8000e8e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000e90:	f7ff fb40 	bl	8000514 <__aeabi_i2d>
 8000e94:	a312      	add	r3, pc, #72	@ (adr r3, 8000ee0 <main+0x3a0>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	f7ff fba5 	bl	80005e8 <__aeabi_dmul>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f7ff fdb1 	bl	8000a0c <__aeabi_d2iz>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <main+0x3d4>)
 8000eae:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eb0:	e002      	b.n	8000eb8 <main+0x378>
	  }
	  else { 									// if the speed is greater than the speed limit
		  TIM3->CCR2 = (int) (PWM_PERIOD); 		// store 100% duty cycle (aka red LED on bright)
 8000eb2:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <main+0x3d4>)
 8000eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000eb6:	6393      	str	r3, [r2, #56]	@ 0x38
	  }


	  /// Wait for 250 milliseconds
	  HAL_Delay(250);
 8000eb8:	20fa      	movs	r0, #250	@ 0xfa
 8000eba:	f000 fe7d 	bl	8001bb8 <HAL_Delay>
  {
 8000ebe:	e6de      	b.n	8000c7e <main+0x13e>
 8000ec0:	b020c49c 	.word	0xb020c49c
 8000ec4:	3fa16872 	.word	0x3fa16872
 8000ec8:	2dc6e2a8 	.word	0x2dc6e2a8
 8000ecc:	3fb6e7e6 	.word	0x3fb6e7e6
 8000ed0:	add9c27f 	.word	0xadd9c27f
 8000ed4:	3fd93265 	.word	0x3fd93265
 8000ed8:	9999999a 	.word	0x9999999a
 8000edc:	3fe99999 	.word	0x3fe99999
 8000ee0:	9999999a 	.word	0x9999999a
 8000ee4:	3fb99999 	.word	0x3fb99999
 8000ee8:	20000188 	.word	0x20000188
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	200000e0 	.word	0x200000e0
 8000ef4:	20000178 	.word	0x20000178
 8000ef8:	2000017c 	.word	0x2000017c
 8000efc:	20000180 	.word	0x20000180
 8000f00:	20000184 	.word	0x20000184
 8000f04:	20000186 	.word	0x20000186
 8000f08:	2000018c 	.word	0x2000018c
 8000f0c:	aaaaaaab 	.word	0xaaaaaaab
 8000f10:	20000189 	.word	0x20000189
 8000f14:	40000400 	.word	0x40000400

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b096      	sub	sp, #88	@ 0x58
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	2244      	movs	r2, #68	@ 0x44
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fc18 	bl	800475c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f3a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f3e:	f001 f971 	bl	8002224 <HAL_PWREx_ControlVoltageScaling>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f48:	f000 fc38 	bl	80017bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f56:	2310      	movs	r3, #16
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f66:	230a      	movs	r3, #10
 8000f68:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 f9a8 	bl	80022d0 <HAL_RCC_OscConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f86:	f000 fc19 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 fd70 	bl	8002a88 <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fae:	f000 fc05 	bl	80017bc <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3758      	adds	r7, #88	@ 0x58
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <MX_SPI1_Init+0x74>)
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <MX_SPI1_Init+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <MX_SPI1_Init+0x74>)
 8000fc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <MX_SPI1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <MX_SPI1_Init+0x74>)
 8000fd6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000fda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <MX_SPI1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <MX_SPI1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_SPI1_Init+0x74>)
 8000fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_SPI1_Init+0x74>)
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_SPI1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_SPI1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <MX_SPI1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_SPI1_Init+0x74>)
 800100a:	2207      	movs	r2, #7
 800100c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <MX_SPI1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_SPI1_Init+0x74>)
 8001016:	2208      	movs	r2, #8
 8001018:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_SPI1_Init+0x74>)
 800101c:	f001 ff20 	bl	8002e60 <HAL_SPI_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001026:	f000 fbc9 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000007c 	.word	0x2000007c
 8001034:	40013000 	.word	0x40013000

08001038 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001056:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <MX_TIM1_Init+0xa0>)
 8001058:	4a20      	ldr	r2, [pc, #128]	@ (80010dc <MX_TIM1_Init+0xa4>)
 800105a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800105c:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <MX_TIM1_Init+0xa0>)
 800105e:	224f      	movs	r2, #79	@ 0x4f
 8001060:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <MX_TIM1_Init+0xa0>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <MX_TIM1_Init+0xa0>)
 800106a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800106e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_TIM1_Init+0xa0>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <MX_TIM1_Init+0xa0>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_TIM1_Init+0xa0>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001082:	4815      	ldr	r0, [pc, #84]	@ (80010d8 <MX_TIM1_Init+0xa0>)
 8001084:	f002 fa6a 	bl	800355c <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800108e:	f000 fb95 	bl	80017bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001096:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480e      	ldr	r0, [pc, #56]	@ (80010d8 <MX_TIM1_Init+0xa0>)
 80010a0:	f002 fd98 	bl	8003bd4 <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80010aa:	f000 fb87 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	4806      	ldr	r0, [pc, #24]	@ (80010d8 <MX_TIM1_Init+0xa0>)
 80010c0:	f003 fa8e 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010ca:	f000 fb77 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200000e0 	.word	0x200000e0
 80010dc:	40012c00 	.word	0x40012c00

080010e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	@ 0x38
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001112:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001114:	4a2d      	ldr	r2, [pc, #180]	@ (80011cc <MX_TIM3_Init+0xec>)
 8001116:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001118:	4b2b      	ldr	r3, [pc, #172]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001124:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001126:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800112a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001132:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001134:	2280      	movs	r2, #128	@ 0x80
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001138:	4823      	ldr	r0, [pc, #140]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 800113a:	f002 fa0f 	bl	800355c <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001144:	f000 fb3a 	bl	80017bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800114e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001152:	4619      	mov	r1, r3
 8001154:	481c      	ldr	r0, [pc, #112]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001156:	f002 fd3d 	bl	8003bd4 <HAL_TIM_ConfigClockSource>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001160:	f000 fb2c 	bl	80017bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001164:	4818      	ldr	r0, [pc, #96]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001166:	f002 fab9 	bl	80036dc <HAL_TIM_PWM_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001170:	f000 fb24 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001184:	f003 fa2c 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800118e:	f000 fb15 	bl	80017bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001192:	2360      	movs	r3, #96	@ 0x60
 8001194:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	2204      	movs	r2, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4807      	ldr	r0, [pc, #28]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 80011aa:	f002 fbff 	bl	80039ac <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011b4:	f000 fb02 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 80011ba:	f000 fb9f 	bl	80018fc <HAL_TIM_MspPostInit>

}
 80011be:	bf00      	nop
 80011c0:	3738      	adds	r7, #56	@ 0x38
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000012c 	.word	0x2000012c
 80011cc:	40000400 	.word	0x40000400

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b47      	ldr	r3, [pc, #284]	@ (8001304 <MX_GPIO_Init+0x134>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a46      	ldr	r2, [pc, #280]	@ (8001304 <MX_GPIO_Init+0x134>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b44      	ldr	r3, [pc, #272]	@ (8001304 <MX_GPIO_Init+0x134>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fe:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <MX_GPIO_Init+0x134>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	4a40      	ldr	r2, [pc, #256]	@ (8001304 <MX_GPIO_Init+0x134>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120a:	4b3e      	ldr	r3, [pc, #248]	@ (8001304 <MX_GPIO_Init+0x134>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <MX_GPIO_Init+0x134>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	4a3a      	ldr	r2, [pc, #232]	@ (8001304 <MX_GPIO_Init+0x134>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001222:	4b38      	ldr	r3, [pc, #224]	@ (8001304 <MX_GPIO_Init+0x134>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b35      	ldr	r3, [pc, #212]	@ (8001304 <MX_GPIO_Init+0x134>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	4a34      	ldr	r2, [pc, #208]	@ (8001304 <MX_GPIO_Init+0x134>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123a:	4b32      	ldr	r3, [pc, #200]	@ (8001304 <MX_GPIO_Init+0x134>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2103      	movs	r1, #3
 800124a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124e:	f000 ffab 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Trig_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8001258:	482b      	ldr	r0, [pc, #172]	@ (8001308 <MX_GPIO_Init+0x138>)
 800125a:	f000 ffa5 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800125e:	2303      	movs	r3, #3
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001278:	f000 fdd4 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig_Pin PB6 */
  GPIO_InitStruct.Pin = Trig_Pin|GPIO_PIN_6;
 800127c:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	481c      	ldr	r0, [pc, #112]	@ (8001308 <MX_GPIO_Init+0x138>)
 8001296:	f000 fdc5 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 800129a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4816      	ldr	r0, [pc, #88]	@ (8001308 <MX_GPIO_Init+0x138>)
 80012b0:	f000 fdb8 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_AVAILABLE_Pin */
  GPIO_InitStruct.Pin = DATA_AVAILABLE_Pin;
 80012b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DATA_AVAILABLE_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4810      	ldr	r0, [pc, #64]	@ (800130c <MX_GPIO_Init+0x13c>)
 80012cc:	f000 fdaa 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : DATA0_Pin DATA1_Pin DATA2_Pin DATA3_Pin */
  GPIO_InitStruct.Pin = DATA0_Pin|DATA1_Pin|DATA2_Pin|DATA3_Pin;
 80012d0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80012d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e8:	f000 fd9c 	bl	8001e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2017      	movs	r0, #23
 80012f2:	f000 fd60 	bl	8001db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012f6:	2017      	movs	r0, #23
 80012f8:	f000 fd79 	bl	8001dee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	@ 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	48000400 	.word	0x48000400
 800130c:	48000800 	.word	0x48000800

08001310 <SPI_write>:

/* USER CODE BEGIN 4 */
void SPI_write(unsigned char data){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	// Chip Enable (low is asserted)
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2140      	movs	r1, #64	@ 0x40
 800131e:	4809      	ldr	r0, [pc, #36]	@ (8001344 <SPI_write+0x34>)
 8001320:	f000 ff42 	bl	80021a8 <HAL_GPIO_WritePin>
	// Send data over SPI1
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, HAL_MAX_DELAY);
 8001324:	1df9      	adds	r1, r7, #7
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	2201      	movs	r2, #1
 800132c:	4806      	ldr	r0, [pc, #24]	@ (8001348 <SPI_write+0x38>)
 800132e:	f001 fe3a 	bl	8002fa6 <HAL_SPI_Transmit>
	// Chip Disable
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	2140      	movs	r1, #64	@ 0x40
 8001336:	4803      	ldr	r0, [pc, #12]	@ (8001344 <SPI_write+0x34>)
 8001338:	f000 ff36 	bl	80021a8 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	48000400 	.word	0x48000400
 8001348:	2000007c 	.word	0x2000007c

0800134c <GLCD_data_write>:

void GLCD_data_write(unsigned char data){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	// Switch to "data" mode (D/C pin high)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	2101      	movs	r1, #1
 800135a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135e:	f000 ff23 	bl	80021a8 <HAL_GPIO_WritePin>
	// Send data over SPI
	SPI_write(data);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ffd3 	bl	8001310 <SPI_write>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <GLCD_command_write>:

void GLCD_command_write(unsigned char data){
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
	// Switch to "command" mode (D/C pin low)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001384:	f000 ff10 	bl	80021a8 <HAL_GPIO_WritePin>
	// Send data over SPI
	SPI_write(data);
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ffc0 	bl	8001310 <SPI_write>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <GLCD_init>:

void GLCD_init(void){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	// Keep CE high when not transmitting
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2140      	movs	r1, #64	@ 0x40
 80013a0:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <GLCD_init+0x50>)
 80013a2:	f000 ff01 	bl	80021a8 <HAL_GPIO_WritePin>
	// Reset the screen (low pulse - down & up)
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2102      	movs	r1, #2
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ae:	f000 fefb 	bl	80021a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2102      	movs	r1, #2
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ba:	f000 fef5 	bl	80021a8 <HAL_GPIO_WritePin>
	// Configure the screen (according to the datasheet)
	GLCD_command_write(0x21); // enter extended command mode
 80013be:	2021      	movs	r0, #33	@ 0x21
 80013c0:	f7ff ffd7 	bl	8001372 <GLCD_command_write>
	GLCD_command_write(0xB0); // set LCD Vop for contrast (this may be adjusted)
 80013c4:	20b0      	movs	r0, #176	@ 0xb0
 80013c6:	f7ff ffd4 	bl	8001372 <GLCD_command_write>
	GLCD_command_write(0x04); // set temp coefficient
 80013ca:	2004      	movs	r0, #4
 80013cc:	f7ff ffd1 	bl	8001372 <GLCD_command_write>
	GLCD_command_write(0x15); // set LCD bias mode (this may be adjusted)
 80013d0:	2015      	movs	r0, #21
 80013d2:	f7ff ffce 	bl	8001372 <GLCD_command_write>
	GLCD_command_write(0x20); // return to normal command mode
 80013d6:	2020      	movs	r0, #32
 80013d8:	f7ff ffcb 	bl	8001372 <GLCD_command_write>
	GLCD_command_write(0x0C); // set display mode normal
 80013dc:	200c      	movs	r0, #12
 80013de:	f7ff ffc8 	bl	8001372 <GLCD_command_write>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	48000400 	.word	0x48000400

080013ec <GLCD_setCursor>:

void GLCD_setCursor(unsigned char x, unsigned char y){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	GLCD_command_write(0x80 | x); // column
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001402:	b2db      	uxtb	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ffb4 	bl	8001372 <GLCD_command_write>
	GLCD_command_write(0x40 | y); // bank
 800140a:	79bb      	ldrb	r3, [r7, #6]
 800140c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ffad 	bl	8001372 <GLCD_command_write>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <GLCD_clear>:

void GLCD_clear(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++){
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	e005      	b.n	8001438 <GLCD_clear+0x18>
	GLCD_data_write(0x00); 	// write zeros
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff ff8d 	bl	800134c <GLCD_data_write>
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++){
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3301      	adds	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 800143e:	dbf5      	blt.n	800142c <GLCD_clear+0xc>
	}
	GLCD_setCursor(0,0); 	// return cursor to top left
 8001440:	2100      	movs	r1, #0
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff ffd2 	bl	80013ec <GLCD_setCursor>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <GLCD_putchar>:

void GLCD_putchar(int font_table_row){
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	 int i;
	 for (i=0; i<6; i++){
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e00f      	b.n	800147e <GLCD_putchar+0x2e>
	 GLCD_data_write(font_table[font_table_row][i]);
 800145e:	490c      	ldr	r1, [pc, #48]	@ (8001490 <GLCD_putchar+0x40>)
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	18ca      	adds	r2, r1, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff6a 	bl	800134c <GLCD_data_write>
	 for (i=0; i<6; i++){
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b05      	cmp	r3, #5
 8001482:	ddec      	ble.n	800145e <GLCD_putchar+0xe>
	 }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	080050c4 	.word	0x080050c4

08001494 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
	// Check if the interrupt was for Data Available Pin
	if (HAL_GPIO_ReadPin(DATA_AVAILABLE_GPIO_Port, DATA_AVAILABLE_Pin) == GPIO_PIN_SET) {
 800149e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a2:	4835      	ldr	r0, [pc, #212]	@ (8001578 <HAL_GPIO_EXTI_Callback+0xe4>)
 80014a4:	f000 fe68 	bl	8002178 <HAL_GPIO_ReadPin>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d15f      	bne.n	800156e <HAL_GPIO_EXTI_Callback+0xda>
		GLCD_setCursor(next_bank,0); // set the cursor
 80014ae:	4b33      	ldr	r3, [pc, #204]	@ (800157c <HAL_GPIO_EXTI_Callback+0xe8>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff98 	bl	80013ec <GLCD_setCursor>
		next_bank += 6; // move to the next bank
 80014bc:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <HAL_GPIO_EXTI_Callback+0xe8>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	3306      	adds	r3, #6
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <HAL_GPIO_EXTI_Callback+0xe8>)
 80014c6:	801a      	strh	r2, [r3, #0]

		// Read data
		uint8_t key = keypad_decode();  // determine which key was pressed
 80014c8:	f000 f85c 	bl	8001584 <keypad_decode>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]

		// Based on what key was pressed, do something (each case)
		switch (key) {
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	d84b      	bhi.n	800156e <HAL_GPIO_EXTI_Callback+0xda>
 80014d6:	a201      	add	r2, pc, #4	@ (adr r2, 80014dc <HAL_GPIO_EXTI_Callback+0x48>)
 80014d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014dc:	0800151d 	.word	0x0800151d
 80014e0:	08001525 	.word	0x08001525
 80014e4:	0800152d 	.word	0x0800152d
 80014e8:	08001535 	.word	0x08001535
 80014ec:	0800153d 	.word	0x0800153d
 80014f0:	08001545 	.word	0x08001545
 80014f4:	0800154d 	.word	0x0800154d
 80014f8:	08001555 	.word	0x08001555
 80014fc:	0800155d 	.word	0x0800155d
 8001500:	08001565 	.word	0x08001565
 8001504:	0800156d 	.word	0x0800156d
 8001508:	0800156d 	.word	0x0800156d
 800150c:	0800156d 	.word	0x0800156d
 8001510:	0800156d 	.word	0x0800156d
 8001514:	0800156d 	.word	0x0800156d
 8001518:	0800156d 	.word	0x0800156d
//				GLCD_putchar(41); // '#'
				break;

			case 0x0: // button "0" was pressed
//				GLCD_putchar(30); // '0'
				speed_limit_digits = 0;
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xec>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
				break;
 8001522:	e024      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xda>

			case 0x1: // button "1" was pressed
//				GLCD_putchar(31); // '1'
				speed_limit_digits = 1;
 8001524:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xec>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
				break;
 800152a:	e020      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xda>

			case 0x2: // button "2" was pressed
//				GLCD_putchar(32); // '2'
				speed_limit_digits = 2;
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xec>)
 800152e:	2202      	movs	r2, #2
 8001530:	701a      	strb	r2, [r3, #0]
				break;
 8001532:	e01c      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xda>

			case 0x3: // button "3" was pressed
//				GLCD_putchar(33); // '3'
				speed_limit_digits = 3;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xec>)
 8001536:	2203      	movs	r2, #3
 8001538:	701a      	strb	r2, [r3, #0]
				break;
 800153a:	e018      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xda>

			case 0x4: // button "4" was pressed
//				GLCD_putchar(34); // '4'
				speed_limit_digits = 4;
 800153c:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xec>)
 800153e:	2204      	movs	r2, #4
 8001540:	701a      	strb	r2, [r3, #0]
				break;
 8001542:	e014      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xda>

			case 0x5: // button "5" was pressed
//				GLCD_putchar(35); // '5'
				speed_limit_digits = 5;
 8001544:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xec>)
 8001546:	2205      	movs	r2, #5
 8001548:	701a      	strb	r2, [r3, #0]
				break;
 800154a:	e010      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xda>

			case 0x6: // button "6" was pressed
//				GLCD_putchar(36); // '6'
				speed_limit_digits = 6;
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xec>)
 800154e:	2206      	movs	r2, #6
 8001550:	701a      	strb	r2, [r3, #0]
				break;
 8001552:	e00c      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xda>

			case 0x7: // button "7" was pressed
//				GLCD_putchar(37); // '7'
				speed_limit_digits = 7;
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xec>)
 8001556:	2207      	movs	r2, #7
 8001558:	701a      	strb	r2, [r3, #0]
				break;
 800155a:	e008      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xda>

			case 0x8: // button "8" was pressed
//				GLCD_putchar(38); // '8'
				speed_limit_digits = 8;
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xec>)
 800155e:	2208      	movs	r2, #8
 8001560:	701a      	strb	r2, [r3, #0]
				break;
 8001562:	e004      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xda>

			case 0x9: // button "9" was pressed
//				GLCD_putchar(39); // '9'
				speed_limit_digits = 9;
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_GPIO_EXTI_Callback+0xec>)
 8001566:	2209      	movs	r2, #9
 8001568:	701a      	strb	r2, [r3, #0]
				break;
 800156a:	e000      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xda>
				break; // end case 0xA
 800156c:	bf00      	nop
		}

	}

}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	48000800 	.word	0x48000800
 800157c:	20000000 	.word	0x20000000
 8001580:	20000188 	.word	0x20000188

08001584 <keypad_decode>:


// This function reads the four data pins from the keypad encoder and maps them to the key value
unsigned char keypad_decode() {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
	unsigned char key = 0x0;
 800158a:	2300      	movs	r3, #0
 800158c:	71fb      	strb	r3, [r7, #7]
	unsigned char data = 0b0000;
 800158e:	2300      	movs	r3, #0
 8001590:	71bb      	strb	r3, [r7, #6]

	// read the data pins and combine into the 4-bit value: D3_D2_D1_D0
	data |= (HAL_GPIO_ReadPin(DATA3_GPIO_Port, DATA3_Pin) << 3);
 8001592:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159a:	f000 fded 	bl	8002178 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	b25a      	sxtb	r2, r3
 80015a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	71bb      	strb	r3, [r7, #6]
	data |= (HAL_GPIO_ReadPin(DATA2_GPIO_Port, DATA2_Pin) << 2);
 80015ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f000 fddf 	bl	8002178 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	71bb      	strb	r3, [r7, #6]
	data |= (HAL_GPIO_ReadPin(DATA1_GPIO_Port, DATA1_Pin) << 1);
 80015ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d2:	f000 fdd1 	bl	8002178 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	71bb      	strb	r3, [r7, #6]
	data |= (HAL_GPIO_ReadPin(DATA0_GPIO_Port, DATA0_Pin) << 0);
 80015e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ee:	f000 fdc3 	bl	8002178 <HAL_GPIO_ReadPin>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	71bb      	strb	r3, [r7, #6]
	// 4 5 6 B
	// 7 8 9 C
	// E 0 F D, where E is "*" and F is "#"

   // Finish this switch statement to remap the "data" to the correct "key"
	switch (data) {
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	d852      	bhi.n	80016ac <keypad_decode+0x128>
 8001606:	a201      	add	r2, pc, #4	@ (adr r2, 800160c <keypad_decode+0x88>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	0800164d 	.word	0x0800164d
 8001610:	08001653 	.word	0x08001653
 8001614:	08001659 	.word	0x08001659
 8001618:	0800165f 	.word	0x0800165f
 800161c:	08001665 	.word	0x08001665
 8001620:	0800166b 	.word	0x0800166b
 8001624:	08001671 	.word	0x08001671
 8001628:	08001677 	.word	0x08001677
 800162c:	0800167d 	.word	0x0800167d
 8001630:	08001683 	.word	0x08001683
 8001634:	08001689 	.word	0x08001689
 8001638:	0800168f 	.word	0x0800168f
 800163c:	08001695 	.word	0x08001695
 8001640:	0800169b 	.word	0x0800169b
 8001644:	080016a1 	.word	0x080016a1
 8001648:	080016a7 	.word	0x080016a7
      case 0x0:
         key = 0x1;
 800164c:	2301      	movs	r3, #1
 800164e:	71fb      	strb	r3, [r7, #7]
         break;
 8001650:	e02c      	b.n	80016ac <keypad_decode+0x128>
      case 0x1:
         key = 0x2;
 8001652:	2302      	movs	r3, #2
 8001654:	71fb      	strb	r3, [r7, #7]
         break;
 8001656:	e029      	b.n	80016ac <keypad_decode+0x128>
      case 0x2:
         key = 0x3;
 8001658:	2303      	movs	r3, #3
 800165a:	71fb      	strb	r3, [r7, #7]
         break;
 800165c:	e026      	b.n	80016ac <keypad_decode+0x128>
      case 0x3:
         key = 0xA;
 800165e:	230a      	movs	r3, #10
 8001660:	71fb      	strb	r3, [r7, #7]
         break;
 8001662:	e023      	b.n	80016ac <keypad_decode+0x128>
      case 0x4:
         key = 0x4;
 8001664:	2304      	movs	r3, #4
 8001666:	71fb      	strb	r3, [r7, #7]
         break;
 8001668:	e020      	b.n	80016ac <keypad_decode+0x128>
      case 0x5:
         key = 0x5;
 800166a:	2305      	movs	r3, #5
 800166c:	71fb      	strb	r3, [r7, #7]
         break;
 800166e:	e01d      	b.n	80016ac <keypad_decode+0x128>
      case 0x6:
         key = 0x6;
 8001670:	2306      	movs	r3, #6
 8001672:	71fb      	strb	r3, [r7, #7]
         break;
 8001674:	e01a      	b.n	80016ac <keypad_decode+0x128>
      case 0x7:
         key = 0xB;
 8001676:	230b      	movs	r3, #11
 8001678:	71fb      	strb	r3, [r7, #7]
         break;
 800167a:	e017      	b.n	80016ac <keypad_decode+0x128>
      case 0x8:
         key = 0x7;
 800167c:	2307      	movs	r3, #7
 800167e:	71fb      	strb	r3, [r7, #7]
         break;
 8001680:	e014      	b.n	80016ac <keypad_decode+0x128>
      case 0x9:
         key = 0x8;
 8001682:	2308      	movs	r3, #8
 8001684:	71fb      	strb	r3, [r7, #7]
         break;
 8001686:	e011      	b.n	80016ac <keypad_decode+0x128>
      case 0xA:
         key = 0x9;
 8001688:	2309      	movs	r3, #9
 800168a:	71fb      	strb	r3, [r7, #7]
         break;
 800168c:	e00e      	b.n	80016ac <keypad_decode+0x128>
      case 0xB:
         key = 0xC;
 800168e:	230c      	movs	r3, #12
 8001690:	71fb      	strb	r3, [r7, #7]
         break;
 8001692:	e00b      	b.n	80016ac <keypad_decode+0x128>
      case 0xC:
         key = 0xE; // *
 8001694:	230e      	movs	r3, #14
 8001696:	71fb      	strb	r3, [r7, #7]
         break;
 8001698:	e008      	b.n	80016ac <keypad_decode+0x128>
      case 0xD:
         key = 0x0;
 800169a:	2300      	movs	r3, #0
 800169c:	71fb      	strb	r3, [r7, #7]
         break;
 800169e:	e005      	b.n	80016ac <keypad_decode+0x128>
      case 0xE:
         key = 0xF; // #
 80016a0:	230f      	movs	r3, #15
 80016a2:	71fb      	strb	r3, [r7, #7]
         break;
 80016a4:	e002      	b.n	80016ac <keypad_decode+0x128>
      case 0xF:
         key = 0xD;
 80016a6:	230d      	movs	r3, #13
 80016a8:	71fb      	strb	r3, [r7, #7]
         break;
 80016aa:	bf00      	nop
	}

	return key;
 80016ac:	79fb      	ldrb	r3, [r7, #7]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop

080016b8 <GLCD_puts>:

void GLCD_puts(const char* str) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
    while (*str) {
 80016c0:	e020      	b.n	8001704 <GLCD_puts+0x4c>
        if (*str >= '0' && *str <= '9') {	// If the character is a number
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80016c8:	d90a      	bls.n	80016e0 <GLCD_puts+0x28>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b39      	cmp	r3, #57	@ 0x39
 80016d0:	d806      	bhi.n	80016e0 <GLCD_puts+0x28>
            GLCD_putchar(*str - '0' + 30); 	// Convert char to font_table index
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	3b12      	subs	r3, #18
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff feb9 	bl	8001450 <GLCD_putchar>
 80016de:	e00e      	b.n	80016fe <GLCD_puts+0x46>
        } else if (*str == '-') {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80016e6:	d103      	bne.n	80016f0 <GLCD_puts+0x38>
        	GLCD_putchar(43); 				// Put '-' (negative sign)
 80016e8:	202b      	movs	r0, #43	@ 0x2b
 80016ea:	f7ff feb1 	bl	8001450 <GLCD_putchar>
 80016ee:	e006      	b.n	80016fe <GLCD_puts+0x46>
        }
        else if (*str == ' ') {
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d102      	bne.n	80016fe <GLCD_puts+0x46>
        	GLCD_putchar(0); 				// Put ' ' (space)
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fea9 	bl	8001450 <GLCD_putchar>
		}
		str++;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3301      	adds	r3, #1
 8001702:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1da      	bne.n	80016c2 <GLCD_puts+0xa>
	}
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <display_speed>:


void display_speed(int speed) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
    char buffer[4]; 		// Buffer to hold the speed string, including space for the negative sign
    snprintf(buffer, sizeof(buffer), "%3d", speed); // Convert speed to string with 3 characters width
 8001720:	f107 000c 	add.w	r0, r7, #12
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a08      	ldr	r2, [pc, #32]	@ (8001748 <display_speed+0x30>)
 8001728:	2104      	movs	r1, #4
 800172a:	f002 ffe1 	bl	80046f0 <sniprintf>
    GLCD_setCursor(0, 3); 	// Set cursor to the forth row
 800172e:	2103      	movs	r1, #3
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff fe5b 	bl	80013ec <GLCD_setCursor>
    GLCD_puts(buffer); 		// Display the speed string
 8001736:	f107 030c 	add.w	r3, r7, #12
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ffbc 	bl	80016b8 <GLCD_puts>
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	080050bc 	.word	0x080050bc

0800174c <display_distance_ft>:
    snprintf(buffer, sizeof(buffer), "%3d", distance_cm); // Convert distance to string (3 digits)
    GLCD_setCursor(0, 2); 	// Set cursor to the third row
    GLCD_puts(buffer); 		// Display the distance string
}

void display_distance_ft(uint16_t distance_ft) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
    char buffer[3]; 		// Buffer to hold the distance string
    snprintf(buffer, sizeof(buffer), "%2d", distance_ft); // Convert distance to string (2 digits)
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	f107 000c 	add.w	r0, r7, #12
 800175c:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <display_distance_ft+0x34>)
 800175e:	2103      	movs	r1, #3
 8001760:	f002 ffc6 	bl	80046f0 <sniprintf>
    GLCD_setCursor(0, 5); 	// Set cursor to the sixth row
 8001764:	2105      	movs	r1, #5
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff fe40 	bl	80013ec <GLCD_setCursor>
    GLCD_puts(buffer); 		// Display the distance string
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ffa1 	bl	80016b8 <GLCD_puts>
}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	080050c0 	.word	0x080050c0

08001784 <display_distance_in>:

void display_distance_in(uint16_t distance_in) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
    char buffer[3]; 		// Buffer to hold the distance string
    snprintf(buffer, sizeof(buffer), "%2d", distance_in); // Convert distance to string (2 digits)
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	f107 000c 	add.w	r0, r7, #12
 8001794:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <display_distance_in+0x34>)
 8001796:	2103      	movs	r1, #3
 8001798:	f002 ffaa 	bl	80046f0 <sniprintf>
    GLCD_setCursor(36, 5); 	// Set cursor to the sixth row, 36th column
 800179c:	2105      	movs	r1, #5
 800179e:	2024      	movs	r0, #36	@ 0x24
 80017a0:	f7ff fe24 	bl	80013ec <GLCD_setCursor>
    GLCD_puts(buffer); 		// Display the distance string
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff85 	bl	80016b8 <GLCD_puts>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	080050c0 	.word	0x080050c0

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <Error_Handler+0x8>

080017c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <HAL_MspInit+0x44>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d2:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <HAL_MspInit+0x44>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017da:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <HAL_MspInit+0x44>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_MspInit+0x44>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ea:	4a08      	ldr	r2, [pc, #32]	@ (800180c <HAL_MspInit+0x44>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_MspInit+0x44>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a17      	ldr	r2, [pc, #92]	@ (800188c <HAL_SPI_MspInit+0x7c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d128      	bne.n	8001884 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001832:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001836:	4a16      	ldr	r2, [pc, #88]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 8001838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800183c:	6613      	str	r3, [r2, #96]	@ 0x60
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001842:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184e:	4a10      	ldr	r2, [pc, #64]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_SPI_MspInit+0x80>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001862:	23a0      	movs	r3, #160	@ 0xa0
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186e:	2303      	movs	r3, #3
 8001870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001872:	2305      	movs	r3, #5
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001880:	f000 fad0 	bl	8001e24 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	@ 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40013000 	.word	0x40013000
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <HAL_TIM_Base_MspInit+0x5c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d10c      	bne.n	80018c0 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018a6:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <HAL_TIM_Base_MspInit+0x60>)
 80018a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <HAL_TIM_Base_MspInit+0x60>)
 80018ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <HAL_TIM_Base_MspInit+0x60>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018be:	e010      	b.n	80018e2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0c      	ldr	r2, [pc, #48]	@ (80018f8 <HAL_TIM_Base_MspInit+0x64>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10b      	bne.n	80018e2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_TIM_Base_MspInit+0x60>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_TIM_Base_MspInit+0x60>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <HAL_TIM_Base_MspInit+0x60>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40012c00 	.word	0x40012c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40000400 	.word	0x40000400

080018fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a11      	ldr	r2, [pc, #68]	@ (8001960 <HAL_TIM_MspPostInit+0x64>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d11b      	bne.n	8001956 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <HAL_TIM_MspPostInit+0x68>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <HAL_TIM_MspPostInit+0x68>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_TIM_MspPostInit+0x68>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = LED_Buzzer_Pin;
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001946:	2302      	movs	r3, #2
 8001948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_Buzzer_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	@ (8001968 <HAL_TIM_MspPostInit+0x6c>)
 8001952:	f000 fa67 	bl	8001e24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40000400 	.word	0x40000400
 8001964:	40021000 	.word	0x40021000
 8001968:	48000800 	.word	0x48000800

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <NMI_Handler+0x4>

08001974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <MemManage_Handler+0x4>

08001984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <UsageFault_Handler+0x4>

08001994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c2:	f000 f8d9 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}

080019ca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DATA_AVAILABLE_Pin);
 80019ce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80019d2:	f000 fc01 	bl	80021d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f002 feae 	bl	800476c <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20018000 	.word	0x20018000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	20000190 	.word	0x20000190
 8001a44:	200002e0 	.word	0x200002e0

08001a48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a70:	f7ff ffea 	bl	8001a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	@ (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f002 fe6d 	bl	8004778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9e:	f7ff f84f 	bl	8000b40 <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ab0:	08005250 	.word	0x08005250
  ldr r2, =_sbss
 8001ab4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ab8:	200002e0 	.word	0x200002e0

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aca:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <HAL_Init+0x3c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a0b      	ldr	r2, [pc, #44]	@ (8001afc <HAL_Init+0x3c>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f000 f962 	bl	8001da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001adc:	2000      	movs	r0, #0
 8001ade:	f000 f80f 	bl	8001b00 <HAL_InitTick>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	71fb      	strb	r3, [r7, #7]
 8001aec:	e001      	b.n	8001af2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aee:	f7ff fe6b 	bl	80017c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af2:	79fb      	ldrb	r3, [r7, #7]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_InitTick+0x6c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b14:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <HAL_InitTick+0x70>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <HAL_InitTick+0x6c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f96d 	bl	8001e0a <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d809      	bhi.n	8001b50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f937 	bl	8001db6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b48:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_InitTick+0x74>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e007      	b.n	8001b60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e004      	b.n	8001b60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e001      	b.n	8001b60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	20000004 	.word	0x20000004
 8001b74:	20000008 	.word	0x20000008

08001b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	20000194 	.word	0x20000194

08001ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000194 	.word	0x20000194

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff ffee 	bl	8001ba0 <HAL_GetTick>
 8001bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d005      	beq.n	8001bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_Delay+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bde:	bf00      	nop
 8001be0:	f7ff ffde 	bl	8001ba0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8f7      	bhi.n	8001be0 <HAL_Delay+0x28>
  {
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2000000c 	.word	0x2000000c

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0b      	blt.n	8001c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4907      	ldr	r1, [pc, #28]	@ (8001c9c <__NVIC_EnableIRQ+0x38>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000e100 	.word	0xe000e100

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	@ (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	@ (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	@ 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	@ 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d6c:	d301      	bcc.n	8001d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00f      	b.n	8001d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d72:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <SysTick_Config+0x40>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f7ff ff8e 	bl	8001ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <SysTick_Config+0x40>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <SysTick_Config+0x40>)
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff29 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc8:	f7ff ff3e 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff ff8e 	bl	8001cf4 <NVIC_EncodePriority>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff5d 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff31 	bl	8001c64 <__NVIC_EnableIRQ>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ffa2 	bl	8001d5c <SysTick_Config>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e17f      	b.n	8002134 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8171 	beq.w	800212e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d005      	beq.n	8001e64 <HAL_GPIO_Init+0x40>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d130      	bne.n	8001ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 0201 	and.w	r2, r3, #1
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d118      	bne.n	8001f04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	f003 0201 	and.w	r2, r3, #1
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d017      	beq.n	8001f40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d123      	bne.n	8001f94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	6939      	ldr	r1, [r7, #16]
 8001f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80ac 	beq.w	800212e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b5f      	ldr	r3, [pc, #380]	@ (8002154 <HAL_GPIO_Init+0x330>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fda:	4a5e      	ldr	r2, [pc, #376]	@ (8002154 <HAL_GPIO_Init+0x330>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fe2:	4b5c      	ldr	r3, [pc, #368]	@ (8002154 <HAL_GPIO_Init+0x330>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fee:	4a5a      	ldr	r2, [pc, #360]	@ (8002158 <HAL_GPIO_Init+0x334>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002018:	d025      	beq.n	8002066 <HAL_GPIO_Init+0x242>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	@ (800215c <HAL_GPIO_Init+0x338>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <HAL_GPIO_Init+0x23e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4e      	ldr	r2, [pc, #312]	@ (8002160 <HAL_GPIO_Init+0x33c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x23a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4d      	ldr	r2, [pc, #308]	@ (8002164 <HAL_GPIO_Init+0x340>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x236>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4c      	ldr	r2, [pc, #304]	@ (8002168 <HAL_GPIO_Init+0x344>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x232>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4b      	ldr	r2, [pc, #300]	@ (800216c <HAL_GPIO_Init+0x348>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x22e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4a      	ldr	r2, [pc, #296]	@ (8002170 <HAL_GPIO_Init+0x34c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x22a>
 800204a:	2306      	movs	r3, #6
 800204c:	e00c      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800204e:	2307      	movs	r3, #7
 8002050:	e00a      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002052:	2305      	movs	r3, #5
 8002054:	e008      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002056:	2304      	movs	r3, #4
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800205a:	2303      	movs	r3, #3
 800205c:	e004      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800205e:	2302      	movs	r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002066:	2300      	movs	r3, #0
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	f002 0203 	and.w	r2, r2, #3
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	4093      	lsls	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002078:	4937      	ldr	r1, [pc, #220]	@ (8002158 <HAL_GPIO_Init+0x334>)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002086:	4b3b      	ldr	r3, [pc, #236]	@ (8002174 <HAL_GPIO_Init+0x350>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020aa:	4a32      	ldr	r2, [pc, #200]	@ (8002174 <HAL_GPIO_Init+0x350>)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020b0:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <HAL_GPIO_Init+0x350>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d4:	4a27      	ldr	r2, [pc, #156]	@ (8002174 <HAL_GPIO_Init+0x350>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020da:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <HAL_GPIO_Init+0x350>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002174 <HAL_GPIO_Init+0x350>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <HAL_GPIO_Init+0x350>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002128:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <HAL_GPIO_Init+0x350>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa22 f303 	lsr.w	r3, r2, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	f47f ae78 	bne.w	8001e34 <HAL_GPIO_Init+0x10>
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	48000400 	.word	0x48000400
 8002160:	48000800 	.word	0x48000800
 8002164:	48000c00 	.word	0x48000c00
 8002168:	48001000 	.word	0x48001000
 800216c:	48001400 	.word	0x48001400
 8002170:	48001800 	.word	0x48001800
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e001      	b.n	800219a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ee:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f94c 	bl	8001494 <HAL_GPIO_EXTI_Callback>
  }
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800220c:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <HAL_PWREx_GetVoltageRange+0x18>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40007000 	.word	0x40007000

08002224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002232:	d130      	bne.n	8002296 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002234:	4b23      	ldr	r3, [pc, #140]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800223c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002240:	d038      	beq.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002242:	4b20      	ldr	r3, [pc, #128]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800224a:	4a1e      	ldr	r2, [pc, #120]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002252:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2232      	movs	r2, #50	@ 0x32
 8002258:	fb02 f303 	mul.w	r3, r2, r3
 800225c:	4a1b      	ldr	r2, [pc, #108]	@ (80022cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	0c9b      	lsrs	r3, r3, #18
 8002264:	3301      	adds	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002268:	e002      	b.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3b01      	subs	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002270:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227c:	d102      	bne.n	8002284 <HAL_PWREx_ControlVoltageScaling+0x60>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f2      	bne.n	800226a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002284:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002290:	d110      	bne.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e00f      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a2:	d007      	beq.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a4:	4b07      	ldr	r3, [pc, #28]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022ac:	4a05      	ldr	r2, [pc, #20]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40007000 	.word	0x40007000
 80022c8:	20000004 	.word	0x20000004
 80022cc:	431bde83 	.word	0x431bde83

080022d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e3ca      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e2:	4b97      	ldr	r3, [pc, #604]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ec:	4b94      	ldr	r3, [pc, #592]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80e4 	beq.w	80024cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_RCC_OscConfig+0x4a>
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	f040 808b 	bne.w	8002428 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b01      	cmp	r3, #1
 8002316:	f040 8087 	bne.w	8002428 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800231a:	4b89      	ldr	r3, [pc, #548]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x62>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e3a2      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1a      	ldr	r2, [r3, #32]
 8002336:	4b82      	ldr	r3, [pc, #520]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <HAL_RCC_OscConfig+0x7c>
 8002342:	4b7f      	ldr	r3, [pc, #508]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800234a:	e005      	b.n	8002358 <HAL_RCC_OscConfig+0x88>
 800234c:	4b7c      	ldr	r3, [pc, #496]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002358:	4293      	cmp	r3, r2
 800235a:	d223      	bcs.n	80023a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fd1d 	bl	8002da0 <RCC_SetFlashLatencyFromMSIRange>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e383      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002370:	4b73      	ldr	r3, [pc, #460]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a72      	ldr	r2, [pc, #456]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b70      	ldr	r3, [pc, #448]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	496d      	ldr	r1, [pc, #436]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238e:	4b6c      	ldr	r3, [pc, #432]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	4968      	ldr	r1, [pc, #416]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
 80023a2:	e025      	b.n	80023f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a4:	4b66      	ldr	r3, [pc, #408]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a65      	ldr	r2, [pc, #404]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80023aa:	f043 0308 	orr.w	r3, r3, #8
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4960      	ldr	r1, [pc, #384]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	495b      	ldr	r1, [pc, #364]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fcdd 	bl	8002da0 <RCC_SetFlashLatencyFromMSIRange>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e343      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f0:	f000 fc4a 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b52      	ldr	r3, [pc, #328]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	4950      	ldr	r1, [pc, #320]	@ (8002544 <HAL_RCC_OscConfig+0x274>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	4a4e      	ldr	r2, [pc, #312]	@ (8002548 <HAL_RCC_OscConfig+0x278>)
 800240e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002410:	4b4e      	ldr	r3, [pc, #312]	@ (800254c <HAL_RCC_OscConfig+0x27c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb73 	bl	8001b00 <HAL_InitTick>
 800241a:	4603      	mov	r3, r0
 800241c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d052      	beq.n	80024ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	e327      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d032      	beq.n	8002496 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002430:	4b43      	ldr	r3, [pc, #268]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a42      	ldr	r2, [pc, #264]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800243c:	f7ff fbb0 	bl	8001ba0 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002444:	f7ff fbac 	bl	8001ba0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e310      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002456:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002462:	4b37      	ldr	r3, [pc, #220]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a36      	ldr	r2, [pc, #216]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b34      	ldr	r3, [pc, #208]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4931      	ldr	r1, [pc, #196]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002480:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	492c      	ldr	r1, [pc, #176]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
 8002494:	e01a      	b.n	80024cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002496:	4b2a      	ldr	r3, [pc, #168]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a29      	ldr	r2, [pc, #164]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024a2:	f7ff fb7d 	bl	8001ba0 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024aa:	f7ff fb79 	bl	8001ba0 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e2dd      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024bc:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x1da>
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d074      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d005      	beq.n	80024ea <HAL_RCC_OscConfig+0x21a>
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b0c      	cmp	r3, #12
 80024e2:	d10e      	bne.n	8002502 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d10b      	bne.n	8002502 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ea:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d064      	beq.n	80025c0 <HAL_RCC_OscConfig+0x2f0>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d160      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e2ba      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x24a>
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0b      	ldr	r2, [pc, #44]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	e026      	b.n	8002568 <HAL_RCC_OscConfig+0x298>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002522:	d115      	bne.n	8002550 <HAL_RCC_OscConfig+0x280>
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a05      	ldr	r2, [pc, #20]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 800252a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b03      	ldr	r3, [pc, #12]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a02      	ldr	r2, [pc, #8]	@ (8002540 <HAL_RCC_OscConfig+0x270>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	e014      	b.n	8002568 <HAL_RCC_OscConfig+0x298>
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	080051cc 	.word	0x080051cc
 8002548:	20000004 	.word	0x20000004
 800254c:	20000008 	.word	0x20000008
 8002550:	4ba0      	ldr	r3, [pc, #640]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a9f      	ldr	r2, [pc, #636]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b9d      	ldr	r3, [pc, #628]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a9c      	ldr	r2, [pc, #624]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7ff fb16 	bl	8001ba0 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002578:	f7ff fb12 	bl	8001ba0 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	@ 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e276      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258a:	4b92      	ldr	r3, [pc, #584]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x2a8>
 8002596:	e014      	b.n	80025c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7ff fb02 	bl	8001ba0 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7ff fafe 	bl	8001ba0 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	@ 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e262      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025b2:	4b88      	ldr	r3, [pc, #544]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x2d0>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d060      	beq.n	8002690 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_OscConfig+0x310>
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d119      	bne.n	800260e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d116      	bne.n	800260e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e0:	4b7c      	ldr	r3, [pc, #496]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_OscConfig+0x328>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e23f      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f8:	4b76      	ldr	r3, [pc, #472]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	061b      	lsls	r3, r3, #24
 8002606:	4973      	ldr	r1, [pc, #460]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260c:	e040      	b.n	8002690 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d023      	beq.n	800265e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002616:	4b6f      	ldr	r3, [pc, #444]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6e      	ldr	r2, [pc, #440]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7ff fabd 	bl	8001ba0 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262a:	f7ff fab9 	bl	8001ba0 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e21d      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800263c:	4b65      	ldr	r3, [pc, #404]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002648:	4b62      	ldr	r3, [pc, #392]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	495f      	ldr	r1, [pc, #380]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
 800265c:	e018      	b.n	8002690 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265e:	4b5d      	ldr	r3, [pc, #372]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5c      	ldr	r2, [pc, #368]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7ff fa99 	bl	8001ba0 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002672:	f7ff fa95 	bl	8001ba0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e1f9      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002684:	4b53      	ldr	r3, [pc, #332]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d03c      	beq.n	8002716 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01c      	beq.n	80026de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a4:	4b4b      	ldr	r3, [pc, #300]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026aa:	4a4a      	ldr	r2, [pc, #296]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7ff fa74 	bl	8001ba0 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff fa70 	bl	8001ba0 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1d4      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ce:	4b41      	ldr	r3, [pc, #260]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80026d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ef      	beq.n	80026bc <HAL_RCC_OscConfig+0x3ec>
 80026dc:	e01b      	b.n	8002716 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026de:	4b3d      	ldr	r3, [pc, #244]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80026e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e4:	4a3b      	ldr	r2, [pc, #236]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7ff fa57 	bl	8001ba0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f6:	f7ff fa53 	bl	8001ba0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e1b7      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002708:	4b32      	ldr	r3, [pc, #200]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 800270a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ef      	bne.n	80026f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80a6 	beq.w	8002870 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002728:	4b2a      	ldr	r3, [pc, #168]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10d      	bne.n	8002750 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002738:	4a26      	ldr	r2, [pc, #152]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002740:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274c:	2301      	movs	r3, #1
 800274e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002750:	4b21      	ldr	r3, [pc, #132]	@ (80027d8 <HAL_RCC_OscConfig+0x508>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d118      	bne.n	800278e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275c:	4b1e      	ldr	r3, [pc, #120]	@ (80027d8 <HAL_RCC_OscConfig+0x508>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1d      	ldr	r2, [pc, #116]	@ (80027d8 <HAL_RCC_OscConfig+0x508>)
 8002762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002768:	f7ff fa1a 	bl	8001ba0 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7ff fa16 	bl	8001ba0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e17a      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_RCC_OscConfig+0x508>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d108      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4d8>
 8002796:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279c:	4a0d      	ldr	r2, [pc, #52]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027a6:	e029      	b.n	80027fc <HAL_RCC_OscConfig+0x52c>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d115      	bne.n	80027dc <HAL_RCC_OscConfig+0x50c>
 80027b0:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b6:	4a07      	ldr	r2, [pc, #28]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027c0:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c6:	4a03      	ldr	r2, [pc, #12]	@ (80027d4 <HAL_RCC_OscConfig+0x504>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027d0:	e014      	b.n	80027fc <HAL_RCC_OscConfig+0x52c>
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40007000 	.word	0x40007000
 80027dc:	4b9c      	ldr	r3, [pc, #624]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e2:	4a9b      	ldr	r2, [pc, #620]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027ec:	4b98      	ldr	r3, [pc, #608]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f2:	4a97      	ldr	r2, [pc, #604]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d016      	beq.n	8002832 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7ff f9cc 	bl	8001ba0 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7ff f9c8 	bl	8001ba0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e12a      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002822:	4b8b      	ldr	r3, [pc, #556]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ed      	beq.n	800280c <HAL_RCC_OscConfig+0x53c>
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7ff f9b5 	bl	8001ba0 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7ff f9b1 	bl	8001ba0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e113      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002850:	4b7f      	ldr	r3, [pc, #508]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1ed      	bne.n	800283a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285e:	7ffb      	ldrb	r3, [r7, #31]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002864:	4b7a      	ldr	r3, [pc, #488]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002868:	4a79      	ldr	r2, [pc, #484]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 800286a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80fe 	beq.w	8002a76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	2b02      	cmp	r3, #2
 8002880:	f040 80d0 	bne.w	8002a24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002884:	4b72      	ldr	r3, [pc, #456]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0203 	and.w	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002894:	429a      	cmp	r2, r3
 8002896:	d130      	bne.n	80028fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	3b01      	subs	r3, #1
 80028a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d127      	bne.n	80028fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d11f      	bne.n	80028fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028c4:	2a07      	cmp	r2, #7
 80028c6:	bf14      	ite	ne
 80028c8:	2201      	movne	r2, #1
 80028ca:	2200      	moveq	r2, #0
 80028cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d113      	bne.n	80028fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	3b01      	subs	r3, #1
 80028e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d06e      	beq.n	80029d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d069      	beq.n	80029d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002900:	4b53      	ldr	r3, [pc, #332]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800290c:	4b50      	ldr	r3, [pc, #320]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0ad      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800291c:	4b4c      	ldr	r3, [pc, #304]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4b      	ldr	r2, [pc, #300]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002926:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002928:	f7ff f93a 	bl	8001ba0 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7ff f936 	bl	8001ba0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e09a      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002942:	4b43      	ldr	r3, [pc, #268]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294e:	4b40      	ldr	r3, [pc, #256]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	4b40      	ldr	r3, [pc, #256]	@ (8002a54 <HAL_RCC_OscConfig+0x784>)
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800295e:	3a01      	subs	r2, #1
 8002960:	0112      	lsls	r2, r2, #4
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002968:	0212      	lsls	r2, r2, #8
 800296a:	4311      	orrs	r1, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002970:	0852      	lsrs	r2, r2, #1
 8002972:	3a01      	subs	r2, #1
 8002974:	0552      	lsls	r2, r2, #21
 8002976:	4311      	orrs	r1, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800297c:	0852      	lsrs	r2, r2, #1
 800297e:	3a01      	subs	r2, #1
 8002980:	0652      	lsls	r2, r2, #25
 8002982:	4311      	orrs	r1, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002988:	0912      	lsrs	r2, r2, #4
 800298a:	0452      	lsls	r2, r2, #17
 800298c:	430a      	orrs	r2, r1
 800298e:	4930      	ldr	r1, [pc, #192]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002990:	4313      	orrs	r3, r2
 8002992:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002994:	4b2e      	ldr	r3, [pc, #184]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2d      	ldr	r2, [pc, #180]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 800299a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029ac:	f7ff f8f8 	bl	8001ba0 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7ff f8f4 	bl	8001ba0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e058      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c6:	4b22      	ldr	r3, [pc, #136]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d2:	e050      	b.n	8002a76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e04f      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d148      	bne.n	8002a76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a19      	ldr	r2, [pc, #100]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029f0:	4b17      	ldr	r3, [pc, #92]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a16      	ldr	r2, [pc, #88]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 80029f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029fc:	f7ff f8d0 	bl	8001ba0 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a04:	f7ff f8cc 	bl	8001ba0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e030      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a16:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x734>
 8002a22:	e028      	b.n	8002a76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d023      	beq.n	8002a72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a08      	ldr	r2, [pc, #32]	@ (8002a50 <HAL_RCC_OscConfig+0x780>)
 8002a30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7ff f8b3 	bl	8001ba0 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3c:	e00c      	b.n	8002a58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3e:	f7ff f8af 	bl	8001ba0 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d905      	bls.n	8002a58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e013      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
 8002a50:	40021000 	.word	0x40021000
 8002a54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a58:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <HAL_RCC_OscConfig+0x7b0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ec      	bne.n	8002a3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_RCC_OscConfig+0x7b0>)
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	4905      	ldr	r1, [pc, #20]	@ (8002a80 <HAL_RCC_OscConfig+0x7b0>)
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_RCC_OscConfig+0x7b4>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60cb      	str	r3, [r1, #12]
 8002a70:	e001      	b.n	8002a76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	feeefffc 	.word	0xfeeefffc

08002a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0e7      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b75      	ldr	r3, [pc, #468]	@ (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d910      	bls.n	8002acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b72      	ldr	r3, [pc, #456]	@ (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4970      	ldr	r1, [pc, #448]	@ (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b6e      	ldr	r3, [pc, #440]	@ (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0cf      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d010      	beq.n	8002afa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	4b66      	ldr	r3, [pc, #408]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d908      	bls.n	8002afa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b63      	ldr	r3, [pc, #396]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4960      	ldr	r1, [pc, #384]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d04c      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d121      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e0a6      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b26:	4b54      	ldr	r3, [pc, #336]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d115      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e09a      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e08e      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e086      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4b46      	ldr	r3, [pc, #280]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 0203 	bic.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4943      	ldr	r1, [pc, #268]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b70:	f7ff f816 	bl	8001ba0 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7ff f812 	bl	8001ba0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e06e      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 020c 	and.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1eb      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b31      	ldr	r3, [pc, #196]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d208      	bcs.n	8002bce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	492b      	ldr	r1, [pc, #172]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bce:	4b29      	ldr	r3, [pc, #164]	@ (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d210      	bcs.n	8002bfe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bdc:	4b25      	ldr	r3, [pc, #148]	@ (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f023 0207 	bic.w	r2, r3, #7
 8002be4:	4923      	ldr	r1, [pc, #140]	@ (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bec:	4b21      	ldr	r3, [pc, #132]	@ (8002c74 <HAL_RCC_ClockConfig+0x1ec>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e036      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4918      	ldr	r1, [pc, #96]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d009      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c28:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4910      	ldr	r1, [pc, #64]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c3c:	f000 f824 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b0d      	ldr	r3, [pc, #52]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	490b      	ldr	r1, [pc, #44]	@ (8002c7c <HAL_RCC_ClockConfig+0x1f4>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	4a09      	ldr	r2, [pc, #36]	@ (8002c80 <HAL_RCC_ClockConfig+0x1f8>)
 8002c5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c5c:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <HAL_RCC_ClockConfig+0x1fc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe ff4d 	bl	8001b00 <HAL_InitTick>
 8002c66:	4603      	mov	r3, r0
 8002c68:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c6a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40022000 	.word	0x40022000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	080051cc 	.word	0x080051cc
 8002c80:	20000004 	.word	0x20000004
 8002c84:	20000008 	.word	0x20000008

08002c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	@ 0x24
 8002c8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c96:	4b3e      	ldr	r3, [pc, #248]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x34>
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d121      	bne.n	8002cfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d11e      	bne.n	8002cfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cbc:	4b34      	ldr	r3, [pc, #208]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cc8:	4b31      	ldr	r3, [pc, #196]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e005      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d102      	bne.n	8002d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d00:	4b25      	ldr	r3, [pc, #148]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	e004      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d0c:	4b23      	ldr	r3, [pc, #140]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d134      	bne.n	8002d80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d16:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d003      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xac>
 8002d2c:	e005      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d30:	617b      	str	r3, [r7, #20]
      break;
 8002d32:	e005      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d34:	4b19      	ldr	r3, [pc, #100]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d36:	617b      	str	r3, [r7, #20]
      break;
 8002d38:	e002      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	617b      	str	r3, [r7, #20]
      break;
 8002d3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d40:	4b13      	ldr	r3, [pc, #76]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	fb03 f202 	mul.w	r2, r3, r2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	0e5b      	lsrs	r3, r3, #25
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	3301      	adds	r3, #1
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d80:	69bb      	ldr	r3, [r7, #24]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	@ 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	080051dc 	.word	0x080051dc
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	007a1200 	.word	0x007a1200

08002da0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dac:	4b2a      	ldr	r3, [pc, #168]	@ (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002db8:	f7ff fa26 	bl	8002208 <HAL_PWREx_GetVoltageRange>
 8002dbc:	6178      	str	r0, [r7, #20]
 8002dbe:	e014      	b.n	8002dea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc0:	4b25      	ldr	r3, [pc, #148]	@ (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc4:	4a24      	ldr	r2, [pc, #144]	@ (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dcc:	4b22      	ldr	r3, [pc, #136]	@ (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dd8:	f7ff fa16 	bl	8002208 <HAL_PWREx_GetVoltageRange>
 8002ddc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b1e      	ldr	r3, [pc, #120]	@ (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	4a1d      	ldr	r2, [pc, #116]	@ (8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002df0:	d10b      	bne.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b80      	cmp	r3, #128	@ 0x80
 8002df6:	d919      	bls.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2ba0      	cmp	r3, #160	@ 0xa0
 8002dfc:	d902      	bls.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dfe:	2302      	movs	r3, #2
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e013      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e04:	2301      	movs	r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	e010      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b80      	cmp	r3, #128	@ 0x80
 8002e0e:	d902      	bls.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e10:	2303      	movs	r3, #3
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	e00a      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b80      	cmp	r3, #128	@ 0x80
 8002e1a:	d102      	bne.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	e004      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b70      	cmp	r3, #112	@ 0x70
 8002e26:	d101      	bne.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e28:	2301      	movs	r3, #1
 8002e2a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 0207 	bic.w	r2, r3, #7
 8002e34:	4909      	ldr	r1, [pc, #36]	@ (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e3c:	4b07      	ldr	r3, [pc, #28]	@ (8002e5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d001      	beq.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40022000 	.word	0x40022000

08002e60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e095      	b.n	8002f9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d108      	bne.n	8002e8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e82:	d009      	beq.n	8002e98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]
 8002e8a:	e005      	b.n	8002e98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe fcac 	bl	8001810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ece:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ed8:	d902      	bls.n	8002ee0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	e002      	b.n	8002ee6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002eee:	d007      	beq.n	8002f00 <HAL_SPI_Init+0xa0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ef8:	d002      	beq.n	8002f00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f42:	ea42 0103 	orr.w	r1, r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	0c1b      	lsrs	r3, r3, #16
 8002f5c:	f003 0204 	and.w	r2, r3, #4
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f7c:	ea42 0103 	orr.w	r1, r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b088      	sub	sp, #32
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb6:	f7fe fdf3 	bl	8001ba0 <HAL_GetTick>
 8002fba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d001      	beq.n	8002fd0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e15c      	b.n	800328a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_SPI_Transmit+0x36>
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e154      	b.n	800328a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_SPI_Transmit+0x48>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e14d      	b.n	800328a <HAL_SPI_Transmit+0x2e4>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003040:	d10f      	bne.n	8003062 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003050:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003060:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d007      	beq.n	8003080 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800307e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003088:	d952      	bls.n	8003130 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_SPI_Transmit+0xf2>
 8003092:	8b7b      	ldrh	r3, [r7, #26]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d145      	bne.n	8003124 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309c:	881a      	ldrh	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a8:	1c9a      	adds	r2, r3, #2
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030bc:	e032      	b.n	8003124 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d112      	bne.n	80030f2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d0:	881a      	ldrh	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030dc:	1c9a      	adds	r2, r3, #2
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030f0:	e018      	b.n	8003124 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030f2:	f7fe fd55 	bl	8001ba0 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d803      	bhi.n	800310a <HAL_SPI_Transmit+0x164>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d102      	bne.n	8003110 <HAL_SPI_Transmit+0x16a>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0b2      	b.n	800328a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1c7      	bne.n	80030be <HAL_SPI_Transmit+0x118>
 800312e:	e083      	b.n	8003238 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_SPI_Transmit+0x198>
 8003138:	8b7b      	ldrh	r3, [r7, #26]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d177      	bne.n	800322e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d912      	bls.n	800316e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	1c9a      	adds	r2, r3, #2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b02      	subs	r3, #2
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800316c:	e05f      	b.n	800322e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	7812      	ldrb	r2, [r2, #0]
 800317a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003194:	e04b      	b.n	800322e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d12b      	bne.n	80031fc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d912      	bls.n	80031d4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b2:	881a      	ldrh	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031be:	1c9a      	adds	r2, r3, #2
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b02      	subs	r3, #2
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031d2:	e02c      	b.n	800322e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	330c      	adds	r3, #12
 80031de:	7812      	ldrb	r2, [r2, #0]
 80031e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031fa:	e018      	b.n	800322e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031fc:	f7fe fcd0 	bl	8001ba0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d803      	bhi.n	8003214 <HAL_SPI_Transmit+0x26e>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d102      	bne.n	800321a <HAL_SPI_Transmit+0x274>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e02d      	b.n	800328a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ae      	bne.n	8003196 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	6839      	ldr	r1, [r7, #0]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f947 	bl	80034d0 <SPI_EndRxTxTransaction>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003288:	2300      	movs	r3, #0
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032a4:	f7fe fc7c 	bl	8001ba0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032b4:	f7fe fc74 	bl	8001ba0 <HAL_GetTick>
 80032b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ba:	4b39      	ldr	r3, [pc, #228]	@ (80033a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	015b      	lsls	r3, r3, #5
 80032c0:	0d1b      	lsrs	r3, r3, #20
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ca:	e054      	b.n	8003376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d050      	beq.n	8003376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032d4:	f7fe fc64 	bl	8001ba0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d902      	bls.n	80032ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d13d      	bne.n	8003366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003302:	d111      	bne.n	8003328 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800330c:	d004      	beq.n	8003318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003316:	d107      	bne.n	8003328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003330:	d10f      	bne.n	8003352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e017      	b.n	8003396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	3b01      	subs	r3, #1
 8003374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4013      	ands	r3, r2
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	429a      	cmp	r2, r3
 8003392:	d19b      	bne.n	80032cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000004 	.word	0x20000004

080033a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	@ 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033b6:	f7fe fbf3 	bl	8001ba0 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80033c6:	f7fe fbeb 	bl	8001ba0 <HAL_GetTick>
 80033ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	330c      	adds	r3, #12
 80033d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033d4:	4b3d      	ldr	r3, [pc, #244]	@ (80034cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00da      	lsls	r2, r3, #3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	0d1b      	lsrs	r3, r3, #20
 80033e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e6:	fb02 f303 	mul.w	r3, r2, r3
 80033ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80033ec:	e060      	b.n	80034b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033f4:	d107      	bne.n	8003406 <SPI_WaitFifoStateUntilTimeout+0x62>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d104      	bne.n	8003406 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003404:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d050      	beq.n	80034b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800340e:	f7fe fbc7 	bl	8001ba0 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800341a:	429a      	cmp	r2, r3
 800341c:	d902      	bls.n	8003424 <SPI_WaitFifoStateUntilTimeout+0x80>
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	2b00      	cmp	r3, #0
 8003422:	d13d      	bne.n	80034a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003432:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800343c:	d111      	bne.n	8003462 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003446:	d004      	beq.n	8003452 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003450:	d107      	bne.n	8003462 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003460:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800346a:	d10f      	bne.n	800348c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800348a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e010      	b.n	80034c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d196      	bne.n	80033ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3728      	adds	r7, #40	@ 0x28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000004 	.word	0x20000004

080034d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff ff5b 	bl	80033a4 <SPI_WaitFifoStateUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e027      	b.n	8003554 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2200      	movs	r2, #0
 800350c:	2180      	movs	r1, #128	@ 0x80
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7ff fec0 	bl	8003294 <SPI_WaitFlagStateUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351e:	f043 0220 	orr.w	r2, r3, #32
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e014      	b.n	8003554 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2200      	movs	r2, #0
 8003532:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff ff34 	bl	80033a4 <SPI_WaitFifoStateUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e000      	b.n	8003554 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e049      	b.n	8003602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fe f986 	bl	8001894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3304      	adds	r3, #4
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f000 fbe4 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e047      	b.n	80036b4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a23      	ldr	r2, [pc, #140]	@ (80036c0 <HAL_TIM_Base_Start+0xb4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01d      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363e:	d018      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1f      	ldr	r2, [pc, #124]	@ (80036c4 <HAL_TIM_Base_Start+0xb8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1e      	ldr	r2, [pc, #120]	@ (80036c8 <HAL_TIM_Base_Start+0xbc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1c      	ldr	r2, [pc, #112]	@ (80036cc <HAL_TIM_Base_Start+0xc0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1b      	ldr	r2, [pc, #108]	@ (80036d0 <HAL_TIM_Base_Start+0xc4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_TIM_Base_Start+0x66>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a19      	ldr	r2, [pc, #100]	@ (80036d4 <HAL_TIM_Base_Start+0xc8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d115      	bne.n	800369e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	4b17      	ldr	r3, [pc, #92]	@ (80036d8 <HAL_TIM_Base_Start+0xcc>)
 800367a:	4013      	ands	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b06      	cmp	r3, #6
 8003682:	d015      	beq.n	80036b0 <HAL_TIM_Base_Start+0xa4>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800368a:	d011      	beq.n	80036b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369c:	e008      	b.n	80036b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e000      	b.n	80036b2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	40013400 	.word	0x40013400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	00010007 	.word	0x00010007

080036dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e049      	b.n	8003782 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f841 	bl	800378a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fb24 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_TIM_PWM_Start+0x24>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e03c      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d109      	bne.n	80037de <HAL_TIM_PWM_Start+0x3e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	bf14      	ite	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	2300      	moveq	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e02f      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d109      	bne.n	80037f8 <HAL_TIM_PWM_Start+0x58>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e022      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d109      	bne.n	8003812 <HAL_TIM_PWM_Start+0x72>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	e015      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b10      	cmp	r3, #16
 8003816:	d109      	bne.n	800382c <HAL_TIM_PWM_Start+0x8c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e008      	b.n	800383e <HAL_TIM_PWM_Start+0x9e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e09c      	b.n	8003980 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <HAL_TIM_PWM_Start+0xb6>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003854:	e023      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d104      	bne.n	8003866 <HAL_TIM_PWM_Start+0xc6>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003864:	e01b      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d104      	bne.n	8003876 <HAL_TIM_PWM_Start+0xd6>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003874:	e013      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	d104      	bne.n	8003886 <HAL_TIM_PWM_Start+0xe6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003884:	e00b      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b10      	cmp	r3, #16
 800388a:	d104      	bne.n	8003896 <HAL_TIM_PWM_Start+0xf6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003894:	e003      	b.n	800389e <HAL_TIM_PWM_Start+0xfe>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2201      	movs	r2, #1
 80038a4:	6839      	ldr	r1, [r7, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fe74 	bl	8004594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a35      	ldr	r2, [pc, #212]	@ (8003988 <HAL_TIM_PWM_Start+0x1e8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_TIM_PWM_Start+0x13e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a34      	ldr	r2, [pc, #208]	@ (800398c <HAL_TIM_PWM_Start+0x1ec>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00e      	beq.n	80038de <HAL_TIM_PWM_Start+0x13e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a32      	ldr	r2, [pc, #200]	@ (8003990 <HAL_TIM_PWM_Start+0x1f0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_TIM_PWM_Start+0x13e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a31      	ldr	r2, [pc, #196]	@ (8003994 <HAL_TIM_PWM_Start+0x1f4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_TIM_PWM_Start+0x13e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003998 <HAL_TIM_PWM_Start+0x1f8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x142>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_TIM_PWM_Start+0x144>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a22      	ldr	r2, [pc, #136]	@ (8003988 <HAL_TIM_PWM_Start+0x1e8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01d      	beq.n	800393e <HAL_TIM_PWM_Start+0x19e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390a:	d018      	beq.n	800393e <HAL_TIM_PWM_Start+0x19e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a22      	ldr	r2, [pc, #136]	@ (800399c <HAL_TIM_PWM_Start+0x1fc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <HAL_TIM_PWM_Start+0x19e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a21      	ldr	r2, [pc, #132]	@ (80039a0 <HAL_TIM_PWM_Start+0x200>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00e      	beq.n	800393e <HAL_TIM_PWM_Start+0x19e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1f      	ldr	r2, [pc, #124]	@ (80039a4 <HAL_TIM_PWM_Start+0x204>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d009      	beq.n	800393e <HAL_TIM_PWM_Start+0x19e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a17      	ldr	r2, [pc, #92]	@ (800398c <HAL_TIM_PWM_Start+0x1ec>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_TIM_PWM_Start+0x19e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <HAL_TIM_PWM_Start+0x1f0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d115      	bne.n	800396a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	4b18      	ldr	r3, [pc, #96]	@ (80039a8 <HAL_TIM_PWM_Start+0x208>)
 8003946:	4013      	ands	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b06      	cmp	r3, #6
 800394e:	d015      	beq.n	800397c <HAL_TIM_PWM_Start+0x1dc>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003956:	d011      	beq.n	800397c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003968:	e008      	b.n	800397c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0201 	orr.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e000      	b.n	800397e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40013400 	.word	0x40013400
 8003990:	40014000 	.word	0x40014000
 8003994:	40014400 	.word	0x40014400
 8003998:	40014800 	.word	0x40014800
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800
 80039a4:	40000c00 	.word	0x40000c00
 80039a8:	00010007 	.word	0x00010007

080039ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e0ff      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b14      	cmp	r3, #20
 80039d6:	f200 80f0 	bhi.w	8003bba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039da:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a35 	.word	0x08003a35
 80039e4:	08003bbb 	.word	0x08003bbb
 80039e8:	08003bbb 	.word	0x08003bbb
 80039ec:	08003bbb 	.word	0x08003bbb
 80039f0:	08003a75 	.word	0x08003a75
 80039f4:	08003bbb 	.word	0x08003bbb
 80039f8:	08003bbb 	.word	0x08003bbb
 80039fc:	08003bbb 	.word	0x08003bbb
 8003a00:	08003ab7 	.word	0x08003ab7
 8003a04:	08003bbb 	.word	0x08003bbb
 8003a08:	08003bbb 	.word	0x08003bbb
 8003a0c:	08003bbb 	.word	0x08003bbb
 8003a10:	08003af7 	.word	0x08003af7
 8003a14:	08003bbb 	.word	0x08003bbb
 8003a18:	08003bbb 	.word	0x08003bbb
 8003a1c:	08003bbb 	.word	0x08003bbb
 8003a20:	08003b39 	.word	0x08003b39
 8003a24:	08003bbb 	.word	0x08003bbb
 8003a28:	08003bbb 	.word	0x08003bbb
 8003a2c:	08003bbb 	.word	0x08003bbb
 8003a30:	08003b79 	.word	0x08003b79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fa3a 	bl	8003eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0208 	orr.w	r2, r2, #8
 8003a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0204 	bic.w	r2, r2, #4
 8003a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6999      	ldr	r1, [r3, #24]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	619a      	str	r2, [r3, #24]
      break;
 8003a72:	e0a5      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 faaa 	bl	8003fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	021a      	lsls	r2, r3, #8
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	619a      	str	r2, [r3, #24]
      break;
 8003ab4:	e084      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fb13 	bl	80040e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0208 	orr.w	r2, r2, #8
 8003ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0204 	bic.w	r2, r2, #4
 8003ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69d9      	ldr	r1, [r3, #28]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	61da      	str	r2, [r3, #28]
      break;
 8003af4:	e064      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fb7b 	bl	80041f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	021a      	lsls	r2, r3, #8
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	61da      	str	r2, [r3, #28]
      break;
 8003b36:	e043      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fbc4 	bl	80042cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b76:	e023      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fc08 	bl	8004394 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bb8:	e002      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop

08003bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e0b6      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x18a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2c:	d03e      	beq.n	8003cac <HAL_TIM_ConfigClockSource+0xd8>
 8003c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c32:	f200 8087 	bhi.w	8003d44 <HAL_TIM_ConfigClockSource+0x170>
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c3a:	f000 8086 	beq.w	8003d4a <HAL_TIM_ConfigClockSource+0x176>
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c42:	d87f      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x170>
 8003c44:	2b70      	cmp	r3, #112	@ 0x70
 8003c46:	d01a      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0xaa>
 8003c48:	2b70      	cmp	r3, #112	@ 0x70
 8003c4a:	d87b      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x170>
 8003c4c:	2b60      	cmp	r3, #96	@ 0x60
 8003c4e:	d050      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0x11e>
 8003c50:	2b60      	cmp	r3, #96	@ 0x60
 8003c52:	d877      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x170>
 8003c54:	2b50      	cmp	r3, #80	@ 0x50
 8003c56:	d03c      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0xfe>
 8003c58:	2b50      	cmp	r3, #80	@ 0x50
 8003c5a:	d873      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x170>
 8003c5c:	2b40      	cmp	r3, #64	@ 0x40
 8003c5e:	d058      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0x13e>
 8003c60:	2b40      	cmp	r3, #64	@ 0x40
 8003c62:	d86f      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x170>
 8003c64:	2b30      	cmp	r3, #48	@ 0x30
 8003c66:	d064      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15e>
 8003c68:	2b30      	cmp	r3, #48	@ 0x30
 8003c6a:	d86b      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x170>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d060      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15e>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d867      	bhi.n	8003d44 <HAL_TIM_ConfigClockSource+0x170>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d05c      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15e>
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d05a      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x15e>
 8003c7c:	e062      	b.n	8003d44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c8e:	f000 fc61 	bl	8004554 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	609a      	str	r2, [r3, #8]
      break;
 8003caa:	e04f      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cbc:	f000 fc4a 	bl	8004554 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cce:	609a      	str	r2, [r3, #8]
      break;
 8003cd0:	e03c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f000 fbbe 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2150      	movs	r1, #80	@ 0x50
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fc17 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003cf0:	e02c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f000 fbdd 	bl	80044be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2160      	movs	r1, #96	@ 0x60
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fc07 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003d10:	e01c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f000 fb9e 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2140      	movs	r1, #64	@ 0x40
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fbf7 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003d30:	e00c      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f000 fbee 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003d42:	e003      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	73fb      	strb	r3, [r7, #15]
      break;
 8003d48:	e000      	b.n	8003d4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a46      	ldr	r2, [pc, #280]	@ (8003e94 <TIM_Base_SetConfig+0x12c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d013      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d86:	d00f      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a43      	ldr	r2, [pc, #268]	@ (8003e98 <TIM_Base_SetConfig+0x130>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a42      	ldr	r2, [pc, #264]	@ (8003e9c <TIM_Base_SetConfig+0x134>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a41      	ldr	r2, [pc, #260]	@ (8003ea0 <TIM_Base_SetConfig+0x138>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a40      	ldr	r2, [pc, #256]	@ (8003ea4 <TIM_Base_SetConfig+0x13c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d108      	bne.n	8003dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a35      	ldr	r2, [pc, #212]	@ (8003e94 <TIM_Base_SetConfig+0x12c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01f      	beq.n	8003e02 <TIM_Base_SetConfig+0x9a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc8:	d01b      	beq.n	8003e02 <TIM_Base_SetConfig+0x9a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a32      	ldr	r2, [pc, #200]	@ (8003e98 <TIM_Base_SetConfig+0x130>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d017      	beq.n	8003e02 <TIM_Base_SetConfig+0x9a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a31      	ldr	r2, [pc, #196]	@ (8003e9c <TIM_Base_SetConfig+0x134>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <TIM_Base_SetConfig+0x9a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a30      	ldr	r2, [pc, #192]	@ (8003ea0 <TIM_Base_SetConfig+0x138>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00f      	beq.n	8003e02 <TIM_Base_SetConfig+0x9a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea4 <TIM_Base_SetConfig+0x13c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00b      	beq.n	8003e02 <TIM_Base_SetConfig+0x9a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea8 <TIM_Base_SetConfig+0x140>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <TIM_Base_SetConfig+0x9a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2d      	ldr	r2, [pc, #180]	@ (8003eac <TIM_Base_SetConfig+0x144>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_Base_SetConfig+0x9a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb0 <TIM_Base_SetConfig+0x148>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d108      	bne.n	8003e14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a16      	ldr	r2, [pc, #88]	@ (8003e94 <TIM_Base_SetConfig+0x12c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00f      	beq.n	8003e60 <TIM_Base_SetConfig+0xf8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a18      	ldr	r2, [pc, #96]	@ (8003ea4 <TIM_Base_SetConfig+0x13c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <TIM_Base_SetConfig+0xf8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <TIM_Base_SetConfig+0x140>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_Base_SetConfig+0xf8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a16      	ldr	r2, [pc, #88]	@ (8003eac <TIM_Base_SetConfig+0x144>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_Base_SetConfig+0xf8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <TIM_Base_SetConfig+0x148>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d103      	bne.n	8003e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f023 0201 	bic.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	611a      	str	r2, [r3, #16]
  }
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40013400 	.word	0x40013400
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40014400 	.word	0x40014400
 8003eb0:	40014800 	.word	0x40014800

08003eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f023 0201 	bic.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0303 	bic.w	r3, r3, #3
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f023 0302 	bic.w	r3, r3, #2
 8003f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc0 <TIM_OC1_SetConfig+0x10c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00f      	beq.n	8003f34 <TIM_OC1_SetConfig+0x80>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a2b      	ldr	r2, [pc, #172]	@ (8003fc4 <TIM_OC1_SetConfig+0x110>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <TIM_OC1_SetConfig+0x80>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc8 <TIM_OC1_SetConfig+0x114>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <TIM_OC1_SetConfig+0x80>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a29      	ldr	r2, [pc, #164]	@ (8003fcc <TIM_OC1_SetConfig+0x118>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_OC1_SetConfig+0x80>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a28      	ldr	r2, [pc, #160]	@ (8003fd0 <TIM_OC1_SetConfig+0x11c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d10c      	bne.n	8003f4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f023 0308 	bic.w	r3, r3, #8
 8003f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 0304 	bic.w	r3, r3, #4
 8003f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc0 <TIM_OC1_SetConfig+0x10c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00f      	beq.n	8003f76 <TIM_OC1_SetConfig+0xc2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc4 <TIM_OC1_SetConfig+0x110>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00b      	beq.n	8003f76 <TIM_OC1_SetConfig+0xc2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a19      	ldr	r2, [pc, #100]	@ (8003fc8 <TIM_OC1_SetConfig+0x114>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <TIM_OC1_SetConfig+0xc2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a18      	ldr	r2, [pc, #96]	@ (8003fcc <TIM_OC1_SetConfig+0x118>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_OC1_SetConfig+0xc2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a17      	ldr	r2, [pc, #92]	@ (8003fd0 <TIM_OC1_SetConfig+0x11c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d111      	bne.n	8003f9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	621a      	str	r2, [r3, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40012c00 	.word	0x40012c00
 8003fc4:	40013400 	.word	0x40013400
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800

08003fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f023 0210 	bic.w	r2, r3, #16
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0320 	bic.w	r3, r3, #32
 8004022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a28      	ldr	r2, [pc, #160]	@ (80040d4 <TIM_OC2_SetConfig+0x100>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_OC2_SetConfig+0x6c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a27      	ldr	r2, [pc, #156]	@ (80040d8 <TIM_OC2_SetConfig+0x104>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10d      	bne.n	800405c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800405a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a1d      	ldr	r2, [pc, #116]	@ (80040d4 <TIM_OC2_SetConfig+0x100>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00f      	beq.n	8004084 <TIM_OC2_SetConfig+0xb0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a1c      	ldr	r2, [pc, #112]	@ (80040d8 <TIM_OC2_SetConfig+0x104>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00b      	beq.n	8004084 <TIM_OC2_SetConfig+0xb0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1b      	ldr	r2, [pc, #108]	@ (80040dc <TIM_OC2_SetConfig+0x108>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d007      	beq.n	8004084 <TIM_OC2_SetConfig+0xb0>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a1a      	ldr	r2, [pc, #104]	@ (80040e0 <TIM_OC2_SetConfig+0x10c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_OC2_SetConfig+0xb0>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a19      	ldr	r2, [pc, #100]	@ (80040e4 <TIM_OC2_SetConfig+0x110>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d113      	bne.n	80040ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800408a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800

080040e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a27      	ldr	r2, [pc, #156]	@ (80041e4 <TIM_OC3_SetConfig+0xfc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_OC3_SetConfig+0x6a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a26      	ldr	r2, [pc, #152]	@ (80041e8 <TIM_OC3_SetConfig+0x100>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10d      	bne.n	800416e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800416c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1c      	ldr	r2, [pc, #112]	@ (80041e4 <TIM_OC3_SetConfig+0xfc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00f      	beq.n	8004196 <TIM_OC3_SetConfig+0xae>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a1b      	ldr	r2, [pc, #108]	@ (80041e8 <TIM_OC3_SetConfig+0x100>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_OC3_SetConfig+0xae>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a1a      	ldr	r2, [pc, #104]	@ (80041ec <TIM_OC3_SetConfig+0x104>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_OC3_SetConfig+0xae>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a19      	ldr	r2, [pc, #100]	@ (80041f0 <TIM_OC3_SetConfig+0x108>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_OC3_SetConfig+0xae>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <TIM_OC3_SetConfig+0x10c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d113      	bne.n	80041be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800419c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	40012c00 	.word	0x40012c00
 80041e8:	40013400 	.word	0x40013400
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40014400 	.word	0x40014400
 80041f4:	40014800 	.word	0x40014800

080041f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	031b      	lsls	r3, r3, #12
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a18      	ldr	r2, [pc, #96]	@ (80042b8 <TIM_OC4_SetConfig+0xc0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00f      	beq.n	800427c <TIM_OC4_SetConfig+0x84>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a17      	ldr	r2, [pc, #92]	@ (80042bc <TIM_OC4_SetConfig+0xc4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00b      	beq.n	800427c <TIM_OC4_SetConfig+0x84>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a16      	ldr	r2, [pc, #88]	@ (80042c0 <TIM_OC4_SetConfig+0xc8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d007      	beq.n	800427c <TIM_OC4_SetConfig+0x84>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a15      	ldr	r2, [pc, #84]	@ (80042c4 <TIM_OC4_SetConfig+0xcc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_OC4_SetConfig+0x84>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a14      	ldr	r2, [pc, #80]	@ (80042c8 <TIM_OC4_SetConfig+0xd0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d109      	bne.n	8004290 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	019b      	lsls	r3, r3, #6
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40013400 	.word	0x40013400
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40014400 	.word	0x40014400
 80042c8:	40014800 	.word	0x40014800

080042cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004310:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a17      	ldr	r2, [pc, #92]	@ (8004380 <TIM_OC5_SetConfig+0xb4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00f      	beq.n	8004346 <TIM_OC5_SetConfig+0x7a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a16      	ldr	r2, [pc, #88]	@ (8004384 <TIM_OC5_SetConfig+0xb8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00b      	beq.n	8004346 <TIM_OC5_SetConfig+0x7a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a15      	ldr	r2, [pc, #84]	@ (8004388 <TIM_OC5_SetConfig+0xbc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d007      	beq.n	8004346 <TIM_OC5_SetConfig+0x7a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a14      	ldr	r2, [pc, #80]	@ (800438c <TIM_OC5_SetConfig+0xc0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d003      	beq.n	8004346 <TIM_OC5_SetConfig+0x7a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a13      	ldr	r2, [pc, #76]	@ (8004390 <TIM_OC5_SetConfig+0xc4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d109      	bne.n	800435a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	621a      	str	r2, [r3, #32]
}
 8004374:	bf00      	nop
 8004376:	371c      	adds	r7, #28
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40012c00 	.word	0x40012c00
 8004384:	40013400 	.word	0x40013400
 8004388:	40014000 	.word	0x40014000
 800438c:	40014400 	.word	0x40014400
 8004390:	40014800 	.word	0x40014800

08004394 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	051b      	lsls	r3, r3, #20
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a18      	ldr	r2, [pc, #96]	@ (800444c <TIM_OC6_SetConfig+0xb8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00f      	beq.n	8004410 <TIM_OC6_SetConfig+0x7c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a17      	ldr	r2, [pc, #92]	@ (8004450 <TIM_OC6_SetConfig+0xbc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00b      	beq.n	8004410 <TIM_OC6_SetConfig+0x7c>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a16      	ldr	r2, [pc, #88]	@ (8004454 <TIM_OC6_SetConfig+0xc0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <TIM_OC6_SetConfig+0x7c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a15      	ldr	r2, [pc, #84]	@ (8004458 <TIM_OC6_SetConfig+0xc4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_OC6_SetConfig+0x7c>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a14      	ldr	r2, [pc, #80]	@ (800445c <TIM_OC6_SetConfig+0xc8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d109      	bne.n	8004424 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004416:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	029b      	lsls	r3, r3, #10
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40013400 	.word	0x40013400
 8004454:	40014000 	.word	0x40014000
 8004458:	40014400 	.word	0x40014400
 800445c:	40014800 	.word	0x40014800

08004460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f023 030a 	bic.w	r3, r3, #10
 800449c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044be:	b480      	push	{r7}
 80044c0:	b087      	sub	sp, #28
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f023 0210 	bic.w	r2, r3, #16
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	f043 0307 	orr.w	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	609a      	str	r2, [r3, #8]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800456e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	021a      	lsls	r2, r3, #8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	431a      	orrs	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2201      	movs	r2, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	401a      	ands	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e068      	b.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a2e      	ldr	r2, [pc, #184]	@ (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2d      	ldr	r2, [pc, #180]	@ (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d108      	bne.n	800463e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004632:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004644:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1e      	ldr	r2, [pc, #120]	@ (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01d      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466a:	d018      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1b      	ldr	r2, [pc, #108]	@ (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1a      	ldr	r2, [pc, #104]	@ (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00e      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a18      	ldr	r2, [pc, #96]	@ (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a13      	ldr	r2, [pc, #76]	@ (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a14      	ldr	r2, [pc, #80]	@ (80046ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10c      	bne.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40013400 	.word	0x40013400
 80046e0:	40000400 	.word	0x40000400
 80046e4:	40000800 	.word	0x40000800
 80046e8:	40000c00 	.word	0x40000c00
 80046ec:	40014000 	.word	0x40014000

080046f0 <sniprintf>:
 80046f0:	b40c      	push	{r2, r3}
 80046f2:	b530      	push	{r4, r5, lr}
 80046f4:	4b18      	ldr	r3, [pc, #96]	@ (8004758 <sniprintf+0x68>)
 80046f6:	1e0c      	subs	r4, r1, #0
 80046f8:	681d      	ldr	r5, [r3, #0]
 80046fa:	b09d      	sub	sp, #116	@ 0x74
 80046fc:	da08      	bge.n	8004710 <sniprintf+0x20>
 80046fe:	238b      	movs	r3, #139	@ 0x8b
 8004700:	602b      	str	r3, [r5, #0]
 8004702:	f04f 30ff 	mov.w	r0, #4294967295
 8004706:	b01d      	add	sp, #116	@ 0x74
 8004708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800470c:	b002      	add	sp, #8
 800470e:	4770      	bx	lr
 8004710:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004714:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800471e:	bf14      	ite	ne
 8004720:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004724:	4623      	moveq	r3, r4
 8004726:	9304      	str	r3, [sp, #16]
 8004728:	9307      	str	r3, [sp, #28]
 800472a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800472e:	9002      	str	r0, [sp, #8]
 8004730:	9006      	str	r0, [sp, #24]
 8004732:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004736:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004738:	ab21      	add	r3, sp, #132	@ 0x84
 800473a:	a902      	add	r1, sp, #8
 800473c:	4628      	mov	r0, r5
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	f000 f994 	bl	8004a6c <_svfiprintf_r>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	bfbc      	itt	lt
 8004748:	238b      	movlt	r3, #139	@ 0x8b
 800474a:	602b      	strlt	r3, [r5, #0]
 800474c:	2c00      	cmp	r4, #0
 800474e:	d0da      	beq.n	8004706 <sniprintf+0x16>
 8004750:	9b02      	ldr	r3, [sp, #8]
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e7d6      	b.n	8004706 <sniprintf+0x16>
 8004758:	20000010 	.word	0x20000010

0800475c <memset>:
 800475c:	4402      	add	r2, r0
 800475e:	4603      	mov	r3, r0
 8004760:	4293      	cmp	r3, r2
 8004762:	d100      	bne.n	8004766 <memset+0xa>
 8004764:	4770      	bx	lr
 8004766:	f803 1b01 	strb.w	r1, [r3], #1
 800476a:	e7f9      	b.n	8004760 <memset+0x4>

0800476c <__errno>:
 800476c:	4b01      	ldr	r3, [pc, #4]	@ (8004774 <__errno+0x8>)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	20000010 	.word	0x20000010

08004778 <__libc_init_array>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4d0d      	ldr	r5, [pc, #52]	@ (80047b0 <__libc_init_array+0x38>)
 800477c:	4c0d      	ldr	r4, [pc, #52]	@ (80047b4 <__libc_init_array+0x3c>)
 800477e:	1b64      	subs	r4, r4, r5
 8004780:	10a4      	asrs	r4, r4, #2
 8004782:	2600      	movs	r6, #0
 8004784:	42a6      	cmp	r6, r4
 8004786:	d109      	bne.n	800479c <__libc_init_array+0x24>
 8004788:	4d0b      	ldr	r5, [pc, #44]	@ (80047b8 <__libc_init_array+0x40>)
 800478a:	4c0c      	ldr	r4, [pc, #48]	@ (80047bc <__libc_init_array+0x44>)
 800478c:	f000 fc64 	bl	8005058 <_init>
 8004790:	1b64      	subs	r4, r4, r5
 8004792:	10a4      	asrs	r4, r4, #2
 8004794:	2600      	movs	r6, #0
 8004796:	42a6      	cmp	r6, r4
 8004798:	d105      	bne.n	80047a6 <__libc_init_array+0x2e>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a0:	4798      	blx	r3
 80047a2:	3601      	adds	r6, #1
 80047a4:	e7ee      	b.n	8004784 <__libc_init_array+0xc>
 80047a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047aa:	4798      	blx	r3
 80047ac:	3601      	adds	r6, #1
 80047ae:	e7f2      	b.n	8004796 <__libc_init_array+0x1e>
 80047b0:	08005248 	.word	0x08005248
 80047b4:	08005248 	.word	0x08005248
 80047b8:	08005248 	.word	0x08005248
 80047bc:	0800524c 	.word	0x0800524c

080047c0 <__retarget_lock_acquire_recursive>:
 80047c0:	4770      	bx	lr

080047c2 <__retarget_lock_release_recursive>:
 80047c2:	4770      	bx	lr

080047c4 <_free_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4605      	mov	r5, r0
 80047c8:	2900      	cmp	r1, #0
 80047ca:	d041      	beq.n	8004850 <_free_r+0x8c>
 80047cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d0:	1f0c      	subs	r4, r1, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bfb8      	it	lt
 80047d6:	18e4      	addlt	r4, r4, r3
 80047d8:	f000 f8e0 	bl	800499c <__malloc_lock>
 80047dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <_free_r+0x90>)
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	b933      	cbnz	r3, 80047f0 <_free_r+0x2c>
 80047e2:	6063      	str	r3, [r4, #4]
 80047e4:	6014      	str	r4, [r2, #0]
 80047e6:	4628      	mov	r0, r5
 80047e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047ec:	f000 b8dc 	b.w	80049a8 <__malloc_unlock>
 80047f0:	42a3      	cmp	r3, r4
 80047f2:	d908      	bls.n	8004806 <_free_r+0x42>
 80047f4:	6820      	ldr	r0, [r4, #0]
 80047f6:	1821      	adds	r1, r4, r0
 80047f8:	428b      	cmp	r3, r1
 80047fa:	bf01      	itttt	eq
 80047fc:	6819      	ldreq	r1, [r3, #0]
 80047fe:	685b      	ldreq	r3, [r3, #4]
 8004800:	1809      	addeq	r1, r1, r0
 8004802:	6021      	streq	r1, [r4, #0]
 8004804:	e7ed      	b.n	80047e2 <_free_r+0x1e>
 8004806:	461a      	mov	r2, r3
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	b10b      	cbz	r3, 8004810 <_free_r+0x4c>
 800480c:	42a3      	cmp	r3, r4
 800480e:	d9fa      	bls.n	8004806 <_free_r+0x42>
 8004810:	6811      	ldr	r1, [r2, #0]
 8004812:	1850      	adds	r0, r2, r1
 8004814:	42a0      	cmp	r0, r4
 8004816:	d10b      	bne.n	8004830 <_free_r+0x6c>
 8004818:	6820      	ldr	r0, [r4, #0]
 800481a:	4401      	add	r1, r0
 800481c:	1850      	adds	r0, r2, r1
 800481e:	4283      	cmp	r3, r0
 8004820:	6011      	str	r1, [r2, #0]
 8004822:	d1e0      	bne.n	80047e6 <_free_r+0x22>
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	6053      	str	r3, [r2, #4]
 800482a:	4408      	add	r0, r1
 800482c:	6010      	str	r0, [r2, #0]
 800482e:	e7da      	b.n	80047e6 <_free_r+0x22>
 8004830:	d902      	bls.n	8004838 <_free_r+0x74>
 8004832:	230c      	movs	r3, #12
 8004834:	602b      	str	r3, [r5, #0]
 8004836:	e7d6      	b.n	80047e6 <_free_r+0x22>
 8004838:	6820      	ldr	r0, [r4, #0]
 800483a:	1821      	adds	r1, r4, r0
 800483c:	428b      	cmp	r3, r1
 800483e:	bf04      	itt	eq
 8004840:	6819      	ldreq	r1, [r3, #0]
 8004842:	685b      	ldreq	r3, [r3, #4]
 8004844:	6063      	str	r3, [r4, #4]
 8004846:	bf04      	itt	eq
 8004848:	1809      	addeq	r1, r1, r0
 800484a:	6021      	streq	r1, [r4, #0]
 800484c:	6054      	str	r4, [r2, #4]
 800484e:	e7ca      	b.n	80047e6 <_free_r+0x22>
 8004850:	bd38      	pop	{r3, r4, r5, pc}
 8004852:	bf00      	nop
 8004854:	200002dc 	.word	0x200002dc

08004858 <sbrk_aligned>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	4e0f      	ldr	r6, [pc, #60]	@ (8004898 <sbrk_aligned+0x40>)
 800485c:	460c      	mov	r4, r1
 800485e:	6831      	ldr	r1, [r6, #0]
 8004860:	4605      	mov	r5, r0
 8004862:	b911      	cbnz	r1, 800486a <sbrk_aligned+0x12>
 8004864:	f000 fba4 	bl	8004fb0 <_sbrk_r>
 8004868:	6030      	str	r0, [r6, #0]
 800486a:	4621      	mov	r1, r4
 800486c:	4628      	mov	r0, r5
 800486e:	f000 fb9f 	bl	8004fb0 <_sbrk_r>
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	d103      	bne.n	800487e <sbrk_aligned+0x26>
 8004876:	f04f 34ff 	mov.w	r4, #4294967295
 800487a:	4620      	mov	r0, r4
 800487c:	bd70      	pop	{r4, r5, r6, pc}
 800487e:	1cc4      	adds	r4, r0, #3
 8004880:	f024 0403 	bic.w	r4, r4, #3
 8004884:	42a0      	cmp	r0, r4
 8004886:	d0f8      	beq.n	800487a <sbrk_aligned+0x22>
 8004888:	1a21      	subs	r1, r4, r0
 800488a:	4628      	mov	r0, r5
 800488c:	f000 fb90 	bl	8004fb0 <_sbrk_r>
 8004890:	3001      	adds	r0, #1
 8004892:	d1f2      	bne.n	800487a <sbrk_aligned+0x22>
 8004894:	e7ef      	b.n	8004876 <sbrk_aligned+0x1e>
 8004896:	bf00      	nop
 8004898:	200002d8 	.word	0x200002d8

0800489c <_malloc_r>:
 800489c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a0:	1ccd      	adds	r5, r1, #3
 80048a2:	f025 0503 	bic.w	r5, r5, #3
 80048a6:	3508      	adds	r5, #8
 80048a8:	2d0c      	cmp	r5, #12
 80048aa:	bf38      	it	cc
 80048ac:	250c      	movcc	r5, #12
 80048ae:	2d00      	cmp	r5, #0
 80048b0:	4606      	mov	r6, r0
 80048b2:	db01      	blt.n	80048b8 <_malloc_r+0x1c>
 80048b4:	42a9      	cmp	r1, r5
 80048b6:	d904      	bls.n	80048c2 <_malloc_r+0x26>
 80048b8:	230c      	movs	r3, #12
 80048ba:	6033      	str	r3, [r6, #0]
 80048bc:	2000      	movs	r0, #0
 80048be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004998 <_malloc_r+0xfc>
 80048c6:	f000 f869 	bl	800499c <__malloc_lock>
 80048ca:	f8d8 3000 	ldr.w	r3, [r8]
 80048ce:	461c      	mov	r4, r3
 80048d0:	bb44      	cbnz	r4, 8004924 <_malloc_r+0x88>
 80048d2:	4629      	mov	r1, r5
 80048d4:	4630      	mov	r0, r6
 80048d6:	f7ff ffbf 	bl	8004858 <sbrk_aligned>
 80048da:	1c43      	adds	r3, r0, #1
 80048dc:	4604      	mov	r4, r0
 80048de:	d158      	bne.n	8004992 <_malloc_r+0xf6>
 80048e0:	f8d8 4000 	ldr.w	r4, [r8]
 80048e4:	4627      	mov	r7, r4
 80048e6:	2f00      	cmp	r7, #0
 80048e8:	d143      	bne.n	8004972 <_malloc_r+0xd6>
 80048ea:	2c00      	cmp	r4, #0
 80048ec:	d04b      	beq.n	8004986 <_malloc_r+0xea>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	4639      	mov	r1, r7
 80048f2:	4630      	mov	r0, r6
 80048f4:	eb04 0903 	add.w	r9, r4, r3
 80048f8:	f000 fb5a 	bl	8004fb0 <_sbrk_r>
 80048fc:	4581      	cmp	r9, r0
 80048fe:	d142      	bne.n	8004986 <_malloc_r+0xea>
 8004900:	6821      	ldr	r1, [r4, #0]
 8004902:	1a6d      	subs	r5, r5, r1
 8004904:	4629      	mov	r1, r5
 8004906:	4630      	mov	r0, r6
 8004908:	f7ff ffa6 	bl	8004858 <sbrk_aligned>
 800490c:	3001      	adds	r0, #1
 800490e:	d03a      	beq.n	8004986 <_malloc_r+0xea>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	442b      	add	r3, r5
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	f8d8 3000 	ldr.w	r3, [r8]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	bb62      	cbnz	r2, 8004978 <_malloc_r+0xdc>
 800491e:	f8c8 7000 	str.w	r7, [r8]
 8004922:	e00f      	b.n	8004944 <_malloc_r+0xa8>
 8004924:	6822      	ldr	r2, [r4, #0]
 8004926:	1b52      	subs	r2, r2, r5
 8004928:	d420      	bmi.n	800496c <_malloc_r+0xd0>
 800492a:	2a0b      	cmp	r2, #11
 800492c:	d917      	bls.n	800495e <_malloc_r+0xc2>
 800492e:	1961      	adds	r1, r4, r5
 8004930:	42a3      	cmp	r3, r4
 8004932:	6025      	str	r5, [r4, #0]
 8004934:	bf18      	it	ne
 8004936:	6059      	strne	r1, [r3, #4]
 8004938:	6863      	ldr	r3, [r4, #4]
 800493a:	bf08      	it	eq
 800493c:	f8c8 1000 	streq.w	r1, [r8]
 8004940:	5162      	str	r2, [r4, r5]
 8004942:	604b      	str	r3, [r1, #4]
 8004944:	4630      	mov	r0, r6
 8004946:	f000 f82f 	bl	80049a8 <__malloc_unlock>
 800494a:	f104 000b 	add.w	r0, r4, #11
 800494e:	1d23      	adds	r3, r4, #4
 8004950:	f020 0007 	bic.w	r0, r0, #7
 8004954:	1ac2      	subs	r2, r0, r3
 8004956:	bf1c      	itt	ne
 8004958:	1a1b      	subne	r3, r3, r0
 800495a:	50a3      	strne	r3, [r4, r2]
 800495c:	e7af      	b.n	80048be <_malloc_r+0x22>
 800495e:	6862      	ldr	r2, [r4, #4]
 8004960:	42a3      	cmp	r3, r4
 8004962:	bf0c      	ite	eq
 8004964:	f8c8 2000 	streq.w	r2, [r8]
 8004968:	605a      	strne	r2, [r3, #4]
 800496a:	e7eb      	b.n	8004944 <_malloc_r+0xa8>
 800496c:	4623      	mov	r3, r4
 800496e:	6864      	ldr	r4, [r4, #4]
 8004970:	e7ae      	b.n	80048d0 <_malloc_r+0x34>
 8004972:	463c      	mov	r4, r7
 8004974:	687f      	ldr	r7, [r7, #4]
 8004976:	e7b6      	b.n	80048e6 <_malloc_r+0x4a>
 8004978:	461a      	mov	r2, r3
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	42a3      	cmp	r3, r4
 800497e:	d1fb      	bne.n	8004978 <_malloc_r+0xdc>
 8004980:	2300      	movs	r3, #0
 8004982:	6053      	str	r3, [r2, #4]
 8004984:	e7de      	b.n	8004944 <_malloc_r+0xa8>
 8004986:	230c      	movs	r3, #12
 8004988:	6033      	str	r3, [r6, #0]
 800498a:	4630      	mov	r0, r6
 800498c:	f000 f80c 	bl	80049a8 <__malloc_unlock>
 8004990:	e794      	b.n	80048bc <_malloc_r+0x20>
 8004992:	6005      	str	r5, [r0, #0]
 8004994:	e7d6      	b.n	8004944 <_malloc_r+0xa8>
 8004996:	bf00      	nop
 8004998:	200002dc 	.word	0x200002dc

0800499c <__malloc_lock>:
 800499c:	4801      	ldr	r0, [pc, #4]	@ (80049a4 <__malloc_lock+0x8>)
 800499e:	f7ff bf0f 	b.w	80047c0 <__retarget_lock_acquire_recursive>
 80049a2:	bf00      	nop
 80049a4:	200002d4 	.word	0x200002d4

080049a8 <__malloc_unlock>:
 80049a8:	4801      	ldr	r0, [pc, #4]	@ (80049b0 <__malloc_unlock+0x8>)
 80049aa:	f7ff bf0a 	b.w	80047c2 <__retarget_lock_release_recursive>
 80049ae:	bf00      	nop
 80049b0:	200002d4 	.word	0x200002d4

080049b4 <__ssputs_r>:
 80049b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b8:	688e      	ldr	r6, [r1, #8]
 80049ba:	461f      	mov	r7, r3
 80049bc:	42be      	cmp	r6, r7
 80049be:	680b      	ldr	r3, [r1, #0]
 80049c0:	4682      	mov	sl, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	4690      	mov	r8, r2
 80049c6:	d82d      	bhi.n	8004a24 <__ssputs_r+0x70>
 80049c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80049d0:	d026      	beq.n	8004a20 <__ssputs_r+0x6c>
 80049d2:	6965      	ldr	r5, [r4, #20]
 80049d4:	6909      	ldr	r1, [r1, #16]
 80049d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049da:	eba3 0901 	sub.w	r9, r3, r1
 80049de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049e2:	1c7b      	adds	r3, r7, #1
 80049e4:	444b      	add	r3, r9
 80049e6:	106d      	asrs	r5, r5, #1
 80049e8:	429d      	cmp	r5, r3
 80049ea:	bf38      	it	cc
 80049ec:	461d      	movcc	r5, r3
 80049ee:	0553      	lsls	r3, r2, #21
 80049f0:	d527      	bpl.n	8004a42 <__ssputs_r+0x8e>
 80049f2:	4629      	mov	r1, r5
 80049f4:	f7ff ff52 	bl	800489c <_malloc_r>
 80049f8:	4606      	mov	r6, r0
 80049fa:	b360      	cbz	r0, 8004a56 <__ssputs_r+0xa2>
 80049fc:	6921      	ldr	r1, [r4, #16]
 80049fe:	464a      	mov	r2, r9
 8004a00:	f000 fae6 	bl	8004fd0 <memcpy>
 8004a04:	89a3      	ldrh	r3, [r4, #12]
 8004a06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0e:	81a3      	strh	r3, [r4, #12]
 8004a10:	6126      	str	r6, [r4, #16]
 8004a12:	6165      	str	r5, [r4, #20]
 8004a14:	444e      	add	r6, r9
 8004a16:	eba5 0509 	sub.w	r5, r5, r9
 8004a1a:	6026      	str	r6, [r4, #0]
 8004a1c:	60a5      	str	r5, [r4, #8]
 8004a1e:	463e      	mov	r6, r7
 8004a20:	42be      	cmp	r6, r7
 8004a22:	d900      	bls.n	8004a26 <__ssputs_r+0x72>
 8004a24:	463e      	mov	r6, r7
 8004a26:	6820      	ldr	r0, [r4, #0]
 8004a28:	4632      	mov	r2, r6
 8004a2a:	4641      	mov	r1, r8
 8004a2c:	f000 faa6 	bl	8004f7c <memmove>
 8004a30:	68a3      	ldr	r3, [r4, #8]
 8004a32:	1b9b      	subs	r3, r3, r6
 8004a34:	60a3      	str	r3, [r4, #8]
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	4433      	add	r3, r6
 8004a3a:	6023      	str	r3, [r4, #0]
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a42:	462a      	mov	r2, r5
 8004a44:	f000 fad2 	bl	8004fec <_realloc_r>
 8004a48:	4606      	mov	r6, r0
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d1e0      	bne.n	8004a10 <__ssputs_r+0x5c>
 8004a4e:	6921      	ldr	r1, [r4, #16]
 8004a50:	4650      	mov	r0, sl
 8004a52:	f7ff feb7 	bl	80047c4 <_free_r>
 8004a56:	230c      	movs	r3, #12
 8004a58:	f8ca 3000 	str.w	r3, [sl]
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	e7e9      	b.n	8004a3e <__ssputs_r+0x8a>
	...

08004a6c <_svfiprintf_r>:
 8004a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a70:	4698      	mov	r8, r3
 8004a72:	898b      	ldrh	r3, [r1, #12]
 8004a74:	061b      	lsls	r3, r3, #24
 8004a76:	b09d      	sub	sp, #116	@ 0x74
 8004a78:	4607      	mov	r7, r0
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	d510      	bpl.n	8004aa2 <_svfiprintf_r+0x36>
 8004a80:	690b      	ldr	r3, [r1, #16]
 8004a82:	b973      	cbnz	r3, 8004aa2 <_svfiprintf_r+0x36>
 8004a84:	2140      	movs	r1, #64	@ 0x40
 8004a86:	f7ff ff09 	bl	800489c <_malloc_r>
 8004a8a:	6028      	str	r0, [r5, #0]
 8004a8c:	6128      	str	r0, [r5, #16]
 8004a8e:	b930      	cbnz	r0, 8004a9e <_svfiprintf_r+0x32>
 8004a90:	230c      	movs	r3, #12
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	b01d      	add	sp, #116	@ 0x74
 8004a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9e:	2340      	movs	r3, #64	@ 0x40
 8004aa0:	616b      	str	r3, [r5, #20]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aa6:	2320      	movs	r3, #32
 8004aa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ab0:	2330      	movs	r3, #48	@ 0x30
 8004ab2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c50 <_svfiprintf_r+0x1e4>
 8004ab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004aba:	f04f 0901 	mov.w	r9, #1
 8004abe:	4623      	mov	r3, r4
 8004ac0:	469a      	mov	sl, r3
 8004ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ac6:	b10a      	cbz	r2, 8004acc <_svfiprintf_r+0x60>
 8004ac8:	2a25      	cmp	r2, #37	@ 0x25
 8004aca:	d1f9      	bne.n	8004ac0 <_svfiprintf_r+0x54>
 8004acc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ad0:	d00b      	beq.n	8004aea <_svfiprintf_r+0x7e>
 8004ad2:	465b      	mov	r3, fp
 8004ad4:	4622      	mov	r2, r4
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4638      	mov	r0, r7
 8004ada:	f7ff ff6b 	bl	80049b4 <__ssputs_r>
 8004ade:	3001      	adds	r0, #1
 8004ae0:	f000 80a7 	beq.w	8004c32 <_svfiprintf_r+0x1c6>
 8004ae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ae6:	445a      	add	r2, fp
 8004ae8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aea:	f89a 3000 	ldrb.w	r3, [sl]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 809f 	beq.w	8004c32 <_svfiprintf_r+0x1c6>
 8004af4:	2300      	movs	r3, #0
 8004af6:	f04f 32ff 	mov.w	r2, #4294967295
 8004afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004afe:	f10a 0a01 	add.w	sl, sl, #1
 8004b02:	9304      	str	r3, [sp, #16]
 8004b04:	9307      	str	r3, [sp, #28]
 8004b06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b0c:	4654      	mov	r4, sl
 8004b0e:	2205      	movs	r2, #5
 8004b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b14:	484e      	ldr	r0, [pc, #312]	@ (8004c50 <_svfiprintf_r+0x1e4>)
 8004b16:	f7fb fb5b 	bl	80001d0 <memchr>
 8004b1a:	9a04      	ldr	r2, [sp, #16]
 8004b1c:	b9d8      	cbnz	r0, 8004b56 <_svfiprintf_r+0xea>
 8004b1e:	06d0      	lsls	r0, r2, #27
 8004b20:	bf44      	itt	mi
 8004b22:	2320      	movmi	r3, #32
 8004b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b28:	0711      	lsls	r1, r2, #28
 8004b2a:	bf44      	itt	mi
 8004b2c:	232b      	movmi	r3, #43	@ 0x2b
 8004b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b32:	f89a 3000 	ldrb.w	r3, [sl]
 8004b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b38:	d015      	beq.n	8004b66 <_svfiprintf_r+0xfa>
 8004b3a:	9a07      	ldr	r2, [sp, #28]
 8004b3c:	4654      	mov	r4, sl
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f04f 0c0a 	mov.w	ip, #10
 8004b44:	4621      	mov	r1, r4
 8004b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b4a:	3b30      	subs	r3, #48	@ 0x30
 8004b4c:	2b09      	cmp	r3, #9
 8004b4e:	d94b      	bls.n	8004be8 <_svfiprintf_r+0x17c>
 8004b50:	b1b0      	cbz	r0, 8004b80 <_svfiprintf_r+0x114>
 8004b52:	9207      	str	r2, [sp, #28]
 8004b54:	e014      	b.n	8004b80 <_svfiprintf_r+0x114>
 8004b56:	eba0 0308 	sub.w	r3, r0, r8
 8004b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	9304      	str	r3, [sp, #16]
 8004b62:	46a2      	mov	sl, r4
 8004b64:	e7d2      	b.n	8004b0c <_svfiprintf_r+0xa0>
 8004b66:	9b03      	ldr	r3, [sp, #12]
 8004b68:	1d19      	adds	r1, r3, #4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	9103      	str	r1, [sp, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bfbb      	ittet	lt
 8004b72:	425b      	neglt	r3, r3
 8004b74:	f042 0202 	orrlt.w	r2, r2, #2
 8004b78:	9307      	strge	r3, [sp, #28]
 8004b7a:	9307      	strlt	r3, [sp, #28]
 8004b7c:	bfb8      	it	lt
 8004b7e:	9204      	strlt	r2, [sp, #16]
 8004b80:	7823      	ldrb	r3, [r4, #0]
 8004b82:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b84:	d10a      	bne.n	8004b9c <_svfiprintf_r+0x130>
 8004b86:	7863      	ldrb	r3, [r4, #1]
 8004b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b8a:	d132      	bne.n	8004bf2 <_svfiprintf_r+0x186>
 8004b8c:	9b03      	ldr	r3, [sp, #12]
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	9203      	str	r2, [sp, #12]
 8004b94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b98:	3402      	adds	r4, #2
 8004b9a:	9305      	str	r3, [sp, #20]
 8004b9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004c60 <_svfiprintf_r+0x1f4>
 8004ba0:	7821      	ldrb	r1, [r4, #0]
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	4650      	mov	r0, sl
 8004ba6:	f7fb fb13 	bl	80001d0 <memchr>
 8004baa:	b138      	cbz	r0, 8004bbc <_svfiprintf_r+0x150>
 8004bac:	9b04      	ldr	r3, [sp, #16]
 8004bae:	eba0 000a 	sub.w	r0, r0, sl
 8004bb2:	2240      	movs	r2, #64	@ 0x40
 8004bb4:	4082      	lsls	r2, r0
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	3401      	adds	r4, #1
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc0:	4824      	ldr	r0, [pc, #144]	@ (8004c54 <_svfiprintf_r+0x1e8>)
 8004bc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bc6:	2206      	movs	r2, #6
 8004bc8:	f7fb fb02 	bl	80001d0 <memchr>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d036      	beq.n	8004c3e <_svfiprintf_r+0x1d2>
 8004bd0:	4b21      	ldr	r3, [pc, #132]	@ (8004c58 <_svfiprintf_r+0x1ec>)
 8004bd2:	bb1b      	cbnz	r3, 8004c1c <_svfiprintf_r+0x1b0>
 8004bd4:	9b03      	ldr	r3, [sp, #12]
 8004bd6:	3307      	adds	r3, #7
 8004bd8:	f023 0307 	bic.w	r3, r3, #7
 8004bdc:	3308      	adds	r3, #8
 8004bde:	9303      	str	r3, [sp, #12]
 8004be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004be2:	4433      	add	r3, r6
 8004be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004be6:	e76a      	b.n	8004abe <_svfiprintf_r+0x52>
 8004be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bec:	460c      	mov	r4, r1
 8004bee:	2001      	movs	r0, #1
 8004bf0:	e7a8      	b.n	8004b44 <_svfiprintf_r+0xd8>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	3401      	adds	r4, #1
 8004bf6:	9305      	str	r3, [sp, #20]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	f04f 0c0a 	mov.w	ip, #10
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c04:	3a30      	subs	r2, #48	@ 0x30
 8004c06:	2a09      	cmp	r2, #9
 8004c08:	d903      	bls.n	8004c12 <_svfiprintf_r+0x1a6>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0c6      	beq.n	8004b9c <_svfiprintf_r+0x130>
 8004c0e:	9105      	str	r1, [sp, #20]
 8004c10:	e7c4      	b.n	8004b9c <_svfiprintf_r+0x130>
 8004c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c16:	4604      	mov	r4, r0
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e7f0      	b.n	8004bfe <_svfiprintf_r+0x192>
 8004c1c:	ab03      	add	r3, sp, #12
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	462a      	mov	r2, r5
 8004c22:	4b0e      	ldr	r3, [pc, #56]	@ (8004c5c <_svfiprintf_r+0x1f0>)
 8004c24:	a904      	add	r1, sp, #16
 8004c26:	4638      	mov	r0, r7
 8004c28:	f3af 8000 	nop.w
 8004c2c:	1c42      	adds	r2, r0, #1
 8004c2e:	4606      	mov	r6, r0
 8004c30:	d1d6      	bne.n	8004be0 <_svfiprintf_r+0x174>
 8004c32:	89ab      	ldrh	r3, [r5, #12]
 8004c34:	065b      	lsls	r3, r3, #25
 8004c36:	f53f af2d 	bmi.w	8004a94 <_svfiprintf_r+0x28>
 8004c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c3c:	e72c      	b.n	8004a98 <_svfiprintf_r+0x2c>
 8004c3e:	ab03      	add	r3, sp, #12
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	462a      	mov	r2, r5
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <_svfiprintf_r+0x1f0>)
 8004c46:	a904      	add	r1, sp, #16
 8004c48:	4638      	mov	r0, r7
 8004c4a:	f000 f879 	bl	8004d40 <_printf_i>
 8004c4e:	e7ed      	b.n	8004c2c <_svfiprintf_r+0x1c0>
 8004c50:	0800520c 	.word	0x0800520c
 8004c54:	08005216 	.word	0x08005216
 8004c58:	00000000 	.word	0x00000000
 8004c5c:	080049b5 	.word	0x080049b5
 8004c60:	08005212 	.word	0x08005212

08004c64 <_printf_common>:
 8004c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c68:	4616      	mov	r6, r2
 8004c6a:	4698      	mov	r8, r3
 8004c6c:	688a      	ldr	r2, [r1, #8]
 8004c6e:	690b      	ldr	r3, [r1, #16]
 8004c70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c74:	4293      	cmp	r3, r2
 8004c76:	bfb8      	it	lt
 8004c78:	4613      	movlt	r3, r2
 8004c7a:	6033      	str	r3, [r6, #0]
 8004c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c80:	4607      	mov	r7, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	b10a      	cbz	r2, 8004c8a <_printf_common+0x26>
 8004c86:	3301      	adds	r3, #1
 8004c88:	6033      	str	r3, [r6, #0]
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	0699      	lsls	r1, r3, #26
 8004c8e:	bf42      	ittt	mi
 8004c90:	6833      	ldrmi	r3, [r6, #0]
 8004c92:	3302      	addmi	r3, #2
 8004c94:	6033      	strmi	r3, [r6, #0]
 8004c96:	6825      	ldr	r5, [r4, #0]
 8004c98:	f015 0506 	ands.w	r5, r5, #6
 8004c9c:	d106      	bne.n	8004cac <_printf_common+0x48>
 8004c9e:	f104 0a19 	add.w	sl, r4, #25
 8004ca2:	68e3      	ldr	r3, [r4, #12]
 8004ca4:	6832      	ldr	r2, [r6, #0]
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	42ab      	cmp	r3, r5
 8004caa:	dc26      	bgt.n	8004cfa <_printf_common+0x96>
 8004cac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cb0:	6822      	ldr	r2, [r4, #0]
 8004cb2:	3b00      	subs	r3, #0
 8004cb4:	bf18      	it	ne
 8004cb6:	2301      	movne	r3, #1
 8004cb8:	0692      	lsls	r2, r2, #26
 8004cba:	d42b      	bmi.n	8004d14 <_printf_common+0xb0>
 8004cbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	47c8      	blx	r9
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d01e      	beq.n	8004d08 <_printf_common+0xa4>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	6922      	ldr	r2, [r4, #16]
 8004cce:	f003 0306 	and.w	r3, r3, #6
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	bf02      	ittt	eq
 8004cd6:	68e5      	ldreq	r5, [r4, #12]
 8004cd8:	6833      	ldreq	r3, [r6, #0]
 8004cda:	1aed      	subeq	r5, r5, r3
 8004cdc:	68a3      	ldr	r3, [r4, #8]
 8004cde:	bf0c      	ite	eq
 8004ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ce4:	2500      	movne	r5, #0
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	bfc4      	itt	gt
 8004cea:	1a9b      	subgt	r3, r3, r2
 8004cec:	18ed      	addgt	r5, r5, r3
 8004cee:	2600      	movs	r6, #0
 8004cf0:	341a      	adds	r4, #26
 8004cf2:	42b5      	cmp	r5, r6
 8004cf4:	d11a      	bne.n	8004d2c <_printf_common+0xc8>
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e008      	b.n	8004d0c <_printf_common+0xa8>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4652      	mov	r2, sl
 8004cfe:	4641      	mov	r1, r8
 8004d00:	4638      	mov	r0, r7
 8004d02:	47c8      	blx	r9
 8004d04:	3001      	adds	r0, #1
 8004d06:	d103      	bne.n	8004d10 <_printf_common+0xac>
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d10:	3501      	adds	r5, #1
 8004d12:	e7c6      	b.n	8004ca2 <_printf_common+0x3e>
 8004d14:	18e1      	adds	r1, r4, r3
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	2030      	movs	r0, #48	@ 0x30
 8004d1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d1e:	4422      	add	r2, r4
 8004d20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d28:	3302      	adds	r3, #2
 8004d2a:	e7c7      	b.n	8004cbc <_printf_common+0x58>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4622      	mov	r2, r4
 8004d30:	4641      	mov	r1, r8
 8004d32:	4638      	mov	r0, r7
 8004d34:	47c8      	blx	r9
 8004d36:	3001      	adds	r0, #1
 8004d38:	d0e6      	beq.n	8004d08 <_printf_common+0xa4>
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7d9      	b.n	8004cf2 <_printf_common+0x8e>
	...

08004d40 <_printf_i>:
 8004d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	7e0f      	ldrb	r7, [r1, #24]
 8004d46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d48:	2f78      	cmp	r7, #120	@ 0x78
 8004d4a:	4691      	mov	r9, r2
 8004d4c:	4680      	mov	r8, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	469a      	mov	sl, r3
 8004d52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d56:	d807      	bhi.n	8004d68 <_printf_i+0x28>
 8004d58:	2f62      	cmp	r7, #98	@ 0x62
 8004d5a:	d80a      	bhi.n	8004d72 <_printf_i+0x32>
 8004d5c:	2f00      	cmp	r7, #0
 8004d5e:	f000 80d1 	beq.w	8004f04 <_printf_i+0x1c4>
 8004d62:	2f58      	cmp	r7, #88	@ 0x58
 8004d64:	f000 80b8 	beq.w	8004ed8 <_printf_i+0x198>
 8004d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d70:	e03a      	b.n	8004de8 <_printf_i+0xa8>
 8004d72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d76:	2b15      	cmp	r3, #21
 8004d78:	d8f6      	bhi.n	8004d68 <_printf_i+0x28>
 8004d7a:	a101      	add	r1, pc, #4	@ (adr r1, 8004d80 <_printf_i+0x40>)
 8004d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d80:	08004dd9 	.word	0x08004dd9
 8004d84:	08004ded 	.word	0x08004ded
 8004d88:	08004d69 	.word	0x08004d69
 8004d8c:	08004d69 	.word	0x08004d69
 8004d90:	08004d69 	.word	0x08004d69
 8004d94:	08004d69 	.word	0x08004d69
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004d69 	.word	0x08004d69
 8004da0:	08004d69 	.word	0x08004d69
 8004da4:	08004d69 	.word	0x08004d69
 8004da8:	08004d69 	.word	0x08004d69
 8004dac:	08004eeb 	.word	0x08004eeb
 8004db0:	08004e17 	.word	0x08004e17
 8004db4:	08004ea5 	.word	0x08004ea5
 8004db8:	08004d69 	.word	0x08004d69
 8004dbc:	08004d69 	.word	0x08004d69
 8004dc0:	08004f0d 	.word	0x08004f0d
 8004dc4:	08004d69 	.word	0x08004d69
 8004dc8:	08004e17 	.word	0x08004e17
 8004dcc:	08004d69 	.word	0x08004d69
 8004dd0:	08004d69 	.word	0x08004d69
 8004dd4:	08004ead 	.word	0x08004ead
 8004dd8:	6833      	ldr	r3, [r6, #0]
 8004dda:	1d1a      	adds	r2, r3, #4
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6032      	str	r2, [r6, #0]
 8004de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004de4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004de8:	2301      	movs	r3, #1
 8004dea:	e09c      	b.n	8004f26 <_printf_i+0x1e6>
 8004dec:	6833      	ldr	r3, [r6, #0]
 8004dee:	6820      	ldr	r0, [r4, #0]
 8004df0:	1d19      	adds	r1, r3, #4
 8004df2:	6031      	str	r1, [r6, #0]
 8004df4:	0606      	lsls	r6, r0, #24
 8004df6:	d501      	bpl.n	8004dfc <_printf_i+0xbc>
 8004df8:	681d      	ldr	r5, [r3, #0]
 8004dfa:	e003      	b.n	8004e04 <_printf_i+0xc4>
 8004dfc:	0645      	lsls	r5, r0, #25
 8004dfe:	d5fb      	bpl.n	8004df8 <_printf_i+0xb8>
 8004e00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e04:	2d00      	cmp	r5, #0
 8004e06:	da03      	bge.n	8004e10 <_printf_i+0xd0>
 8004e08:	232d      	movs	r3, #45	@ 0x2d
 8004e0a:	426d      	negs	r5, r5
 8004e0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e10:	4858      	ldr	r0, [pc, #352]	@ (8004f74 <_printf_i+0x234>)
 8004e12:	230a      	movs	r3, #10
 8004e14:	e011      	b.n	8004e3a <_printf_i+0xfa>
 8004e16:	6821      	ldr	r1, [r4, #0]
 8004e18:	6833      	ldr	r3, [r6, #0]
 8004e1a:	0608      	lsls	r0, r1, #24
 8004e1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e20:	d402      	bmi.n	8004e28 <_printf_i+0xe8>
 8004e22:	0649      	lsls	r1, r1, #25
 8004e24:	bf48      	it	mi
 8004e26:	b2ad      	uxthmi	r5, r5
 8004e28:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e2a:	4852      	ldr	r0, [pc, #328]	@ (8004f74 <_printf_i+0x234>)
 8004e2c:	6033      	str	r3, [r6, #0]
 8004e2e:	bf14      	ite	ne
 8004e30:	230a      	movne	r3, #10
 8004e32:	2308      	moveq	r3, #8
 8004e34:	2100      	movs	r1, #0
 8004e36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e3a:	6866      	ldr	r6, [r4, #4]
 8004e3c:	60a6      	str	r6, [r4, #8]
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	db05      	blt.n	8004e4e <_printf_i+0x10e>
 8004e42:	6821      	ldr	r1, [r4, #0]
 8004e44:	432e      	orrs	r6, r5
 8004e46:	f021 0104 	bic.w	r1, r1, #4
 8004e4a:	6021      	str	r1, [r4, #0]
 8004e4c:	d04b      	beq.n	8004ee6 <_printf_i+0x1a6>
 8004e4e:	4616      	mov	r6, r2
 8004e50:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e54:	fb03 5711 	mls	r7, r3, r1, r5
 8004e58:	5dc7      	ldrb	r7, [r0, r7]
 8004e5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e5e:	462f      	mov	r7, r5
 8004e60:	42bb      	cmp	r3, r7
 8004e62:	460d      	mov	r5, r1
 8004e64:	d9f4      	bls.n	8004e50 <_printf_i+0x110>
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d10b      	bne.n	8004e82 <_printf_i+0x142>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	07df      	lsls	r7, r3, #31
 8004e6e:	d508      	bpl.n	8004e82 <_printf_i+0x142>
 8004e70:	6923      	ldr	r3, [r4, #16]
 8004e72:	6861      	ldr	r1, [r4, #4]
 8004e74:	4299      	cmp	r1, r3
 8004e76:	bfde      	ittt	le
 8004e78:	2330      	movle	r3, #48	@ 0x30
 8004e7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e82:	1b92      	subs	r2, r2, r6
 8004e84:	6122      	str	r2, [r4, #16]
 8004e86:	f8cd a000 	str.w	sl, [sp]
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	aa03      	add	r2, sp, #12
 8004e8e:	4621      	mov	r1, r4
 8004e90:	4640      	mov	r0, r8
 8004e92:	f7ff fee7 	bl	8004c64 <_printf_common>
 8004e96:	3001      	adds	r0, #1
 8004e98:	d14a      	bne.n	8004f30 <_printf_i+0x1f0>
 8004e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9e:	b004      	add	sp, #16
 8004ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	f043 0320 	orr.w	r3, r3, #32
 8004eaa:	6023      	str	r3, [r4, #0]
 8004eac:	4832      	ldr	r0, [pc, #200]	@ (8004f78 <_printf_i+0x238>)
 8004eae:	2778      	movs	r7, #120	@ 0x78
 8004eb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	6831      	ldr	r1, [r6, #0]
 8004eb8:	061f      	lsls	r7, r3, #24
 8004eba:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ebe:	d402      	bmi.n	8004ec6 <_printf_i+0x186>
 8004ec0:	065f      	lsls	r7, r3, #25
 8004ec2:	bf48      	it	mi
 8004ec4:	b2ad      	uxthmi	r5, r5
 8004ec6:	6031      	str	r1, [r6, #0]
 8004ec8:	07d9      	lsls	r1, r3, #31
 8004eca:	bf44      	itt	mi
 8004ecc:	f043 0320 	orrmi.w	r3, r3, #32
 8004ed0:	6023      	strmi	r3, [r4, #0]
 8004ed2:	b11d      	cbz	r5, 8004edc <_printf_i+0x19c>
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	e7ad      	b.n	8004e34 <_printf_i+0xf4>
 8004ed8:	4826      	ldr	r0, [pc, #152]	@ (8004f74 <_printf_i+0x234>)
 8004eda:	e7e9      	b.n	8004eb0 <_printf_i+0x170>
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	f023 0320 	bic.w	r3, r3, #32
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	e7f6      	b.n	8004ed4 <_printf_i+0x194>
 8004ee6:	4616      	mov	r6, r2
 8004ee8:	e7bd      	b.n	8004e66 <_printf_i+0x126>
 8004eea:	6833      	ldr	r3, [r6, #0]
 8004eec:	6825      	ldr	r5, [r4, #0]
 8004eee:	6961      	ldr	r1, [r4, #20]
 8004ef0:	1d18      	adds	r0, r3, #4
 8004ef2:	6030      	str	r0, [r6, #0]
 8004ef4:	062e      	lsls	r6, r5, #24
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	d501      	bpl.n	8004efe <_printf_i+0x1be>
 8004efa:	6019      	str	r1, [r3, #0]
 8004efc:	e002      	b.n	8004f04 <_printf_i+0x1c4>
 8004efe:	0668      	lsls	r0, r5, #25
 8004f00:	d5fb      	bpl.n	8004efa <_printf_i+0x1ba>
 8004f02:	8019      	strh	r1, [r3, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	4616      	mov	r6, r2
 8004f0a:	e7bc      	b.n	8004e86 <_printf_i+0x146>
 8004f0c:	6833      	ldr	r3, [r6, #0]
 8004f0e:	1d1a      	adds	r2, r3, #4
 8004f10:	6032      	str	r2, [r6, #0]
 8004f12:	681e      	ldr	r6, [r3, #0]
 8004f14:	6862      	ldr	r2, [r4, #4]
 8004f16:	2100      	movs	r1, #0
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7fb f959 	bl	80001d0 <memchr>
 8004f1e:	b108      	cbz	r0, 8004f24 <_printf_i+0x1e4>
 8004f20:	1b80      	subs	r0, r0, r6
 8004f22:	6060      	str	r0, [r4, #4]
 8004f24:	6863      	ldr	r3, [r4, #4]
 8004f26:	6123      	str	r3, [r4, #16]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f2e:	e7aa      	b.n	8004e86 <_printf_i+0x146>
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	4632      	mov	r2, r6
 8004f34:	4649      	mov	r1, r9
 8004f36:	4640      	mov	r0, r8
 8004f38:	47d0      	blx	sl
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d0ad      	beq.n	8004e9a <_printf_i+0x15a>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	079b      	lsls	r3, r3, #30
 8004f42:	d413      	bmi.n	8004f6c <_printf_i+0x22c>
 8004f44:	68e0      	ldr	r0, [r4, #12]
 8004f46:	9b03      	ldr	r3, [sp, #12]
 8004f48:	4298      	cmp	r0, r3
 8004f4a:	bfb8      	it	lt
 8004f4c:	4618      	movlt	r0, r3
 8004f4e:	e7a6      	b.n	8004e9e <_printf_i+0x15e>
 8004f50:	2301      	movs	r3, #1
 8004f52:	4632      	mov	r2, r6
 8004f54:	4649      	mov	r1, r9
 8004f56:	4640      	mov	r0, r8
 8004f58:	47d0      	blx	sl
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d09d      	beq.n	8004e9a <_printf_i+0x15a>
 8004f5e:	3501      	adds	r5, #1
 8004f60:	68e3      	ldr	r3, [r4, #12]
 8004f62:	9903      	ldr	r1, [sp, #12]
 8004f64:	1a5b      	subs	r3, r3, r1
 8004f66:	42ab      	cmp	r3, r5
 8004f68:	dcf2      	bgt.n	8004f50 <_printf_i+0x210>
 8004f6a:	e7eb      	b.n	8004f44 <_printf_i+0x204>
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	f104 0619 	add.w	r6, r4, #25
 8004f72:	e7f5      	b.n	8004f60 <_printf_i+0x220>
 8004f74:	0800521d 	.word	0x0800521d
 8004f78:	0800522e 	.word	0x0800522e

08004f7c <memmove>:
 8004f7c:	4288      	cmp	r0, r1
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	eb01 0402 	add.w	r4, r1, r2
 8004f84:	d902      	bls.n	8004f8c <memmove+0x10>
 8004f86:	4284      	cmp	r4, r0
 8004f88:	4623      	mov	r3, r4
 8004f8a:	d807      	bhi.n	8004f9c <memmove+0x20>
 8004f8c:	1e43      	subs	r3, r0, #1
 8004f8e:	42a1      	cmp	r1, r4
 8004f90:	d008      	beq.n	8004fa4 <memmove+0x28>
 8004f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f9a:	e7f8      	b.n	8004f8e <memmove+0x12>
 8004f9c:	4402      	add	r2, r0
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	428a      	cmp	r2, r1
 8004fa2:	d100      	bne.n	8004fa6 <memmove+0x2a>
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fae:	e7f7      	b.n	8004fa0 <memmove+0x24>

08004fb0 <_sbrk_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	4d06      	ldr	r5, [pc, #24]	@ (8004fcc <_sbrk_r+0x1c>)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	602b      	str	r3, [r5, #0]
 8004fbc:	f7fc fd0e 	bl	80019dc <_sbrk>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_sbrk_r+0x1a>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_sbrk_r+0x1a>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	200002d0 	.word	0x200002d0

08004fd0 <memcpy>:
 8004fd0:	440a      	add	r2, r1
 8004fd2:	4291      	cmp	r1, r2
 8004fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd8:	d100      	bne.n	8004fdc <memcpy+0xc>
 8004fda:	4770      	bx	lr
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe6:	4291      	cmp	r1, r2
 8004fe8:	d1f9      	bne.n	8004fde <memcpy+0xe>
 8004fea:	bd10      	pop	{r4, pc}

08004fec <_realloc_r>:
 8004fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	4614      	mov	r4, r2
 8004ff4:	460d      	mov	r5, r1
 8004ff6:	b921      	cbnz	r1, 8005002 <_realloc_r+0x16>
 8004ff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	f7ff bc4d 	b.w	800489c <_malloc_r>
 8005002:	b92a      	cbnz	r2, 8005010 <_realloc_r+0x24>
 8005004:	f7ff fbde 	bl	80047c4 <_free_r>
 8005008:	4625      	mov	r5, r4
 800500a:	4628      	mov	r0, r5
 800500c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005010:	f000 f81a 	bl	8005048 <_malloc_usable_size_r>
 8005014:	4284      	cmp	r4, r0
 8005016:	4606      	mov	r6, r0
 8005018:	d802      	bhi.n	8005020 <_realloc_r+0x34>
 800501a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800501e:	d8f4      	bhi.n	800500a <_realloc_r+0x1e>
 8005020:	4621      	mov	r1, r4
 8005022:	4638      	mov	r0, r7
 8005024:	f7ff fc3a 	bl	800489c <_malloc_r>
 8005028:	4680      	mov	r8, r0
 800502a:	b908      	cbnz	r0, 8005030 <_realloc_r+0x44>
 800502c:	4645      	mov	r5, r8
 800502e:	e7ec      	b.n	800500a <_realloc_r+0x1e>
 8005030:	42b4      	cmp	r4, r6
 8005032:	4622      	mov	r2, r4
 8005034:	4629      	mov	r1, r5
 8005036:	bf28      	it	cs
 8005038:	4632      	movcs	r2, r6
 800503a:	f7ff ffc9 	bl	8004fd0 <memcpy>
 800503e:	4629      	mov	r1, r5
 8005040:	4638      	mov	r0, r7
 8005042:	f7ff fbbf 	bl	80047c4 <_free_r>
 8005046:	e7f1      	b.n	800502c <_realloc_r+0x40>

08005048 <_malloc_usable_size_r>:
 8005048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504c:	1f18      	subs	r0, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	bfbc      	itt	lt
 8005052:	580b      	ldrlt	r3, [r1, r0]
 8005054:	18c0      	addlt	r0, r0, r3
 8005056:	4770      	bx	lr

08005058 <_init>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	bf00      	nop
 800505c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505e:	bc08      	pop	{r3}
 8005060:	469e      	mov	lr, r3
 8005062:	4770      	bx	lr

08005064 <_fini>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	bf00      	nop
 8005068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506a:	bc08      	pop	{r3}
 800506c:	469e      	mov	lr, r3
 800506e:	4770      	bx	lr
